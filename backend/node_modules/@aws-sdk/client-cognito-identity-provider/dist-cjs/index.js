'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "cognito-idp",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class CognitoIdentityProviderClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultCognitoIdentityProviderHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class CognitoIdentityProviderServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, CognitoIdentityProviderServiceException.prototype);
    }
}

const RecoveryOptionNameType = {
    ADMIN_ONLY: "admin_only",
    VERIFIED_EMAIL: "verified_email",
    VERIFIED_PHONE_NUMBER: "verified_phone_number",
};
const AccountTakeoverEventActionType = {
    BLOCK: "BLOCK",
    MFA_IF_CONFIGURED: "MFA_IF_CONFIGURED",
    MFA_REQUIRED: "MFA_REQUIRED",
    NO_ACTION: "NO_ACTION",
};
const AttributeDataType = {
    BOOLEAN: "Boolean",
    DATETIME: "DateTime",
    NUMBER: "Number",
    STRING: "String",
};
class InternalErrorException extends CognitoIdentityProviderServiceException {
    name = "InternalErrorException";
    $fault = "server";
    constructor(opts) {
        super({
            name: "InternalErrorException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalErrorException.prototype);
    }
}
class InvalidParameterException extends CognitoIdentityProviderServiceException {
    name = "InvalidParameterException";
    $fault = "client";
    reasonCode;
    constructor(opts) {
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
        this.reasonCode = opts.reasonCode;
    }
}
class NotAuthorizedException extends CognitoIdentityProviderServiceException {
    name = "NotAuthorizedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "NotAuthorizedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NotAuthorizedException.prototype);
    }
}
class ResourceNotFoundException extends CognitoIdentityProviderServiceException {
    name = "ResourceNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
class TooManyRequestsException extends CognitoIdentityProviderServiceException {
    name = "TooManyRequestsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
    }
}
class UserImportInProgressException extends CognitoIdentityProviderServiceException {
    name = "UserImportInProgressException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UserImportInProgressException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UserImportInProgressException.prototype);
    }
}
class UserNotFoundException extends CognitoIdentityProviderServiceException {
    name = "UserNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UserNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UserNotFoundException.prototype);
    }
}
class InvalidLambdaResponseException extends CognitoIdentityProviderServiceException {
    name = "InvalidLambdaResponseException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidLambdaResponseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidLambdaResponseException.prototype);
    }
}
class LimitExceededException extends CognitoIdentityProviderServiceException {
    name = "LimitExceededException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
class TooManyFailedAttemptsException extends CognitoIdentityProviderServiceException {
    name = "TooManyFailedAttemptsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TooManyFailedAttemptsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyFailedAttemptsException.prototype);
    }
}
class UnexpectedLambdaException extends CognitoIdentityProviderServiceException {
    name = "UnexpectedLambdaException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnexpectedLambdaException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnexpectedLambdaException.prototype);
    }
}
class UserLambdaValidationException extends CognitoIdentityProviderServiceException {
    name = "UserLambdaValidationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UserLambdaValidationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UserLambdaValidationException.prototype);
    }
}
const DeliveryMediumType = {
    EMAIL: "EMAIL",
    SMS: "SMS",
};
const MessageActionType = {
    RESEND: "RESEND",
    SUPPRESS: "SUPPRESS",
};
const UserStatusType = {
    ARCHIVED: "ARCHIVED",
    COMPROMISED: "COMPROMISED",
    CONFIRMED: "CONFIRMED",
    EXTERNAL_PROVIDER: "EXTERNAL_PROVIDER",
    FORCE_CHANGE_PASSWORD: "FORCE_CHANGE_PASSWORD",
    RESET_REQUIRED: "RESET_REQUIRED",
    UNCONFIRMED: "UNCONFIRMED",
    UNKNOWN: "UNKNOWN",
};
class CodeDeliveryFailureException extends CognitoIdentityProviderServiceException {
    name = "CodeDeliveryFailureException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "CodeDeliveryFailureException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CodeDeliveryFailureException.prototype);
    }
}
class InvalidPasswordException extends CognitoIdentityProviderServiceException {
    name = "InvalidPasswordException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidPasswordException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidPasswordException.prototype);
    }
}
class InvalidSmsRoleAccessPolicyException extends CognitoIdentityProviderServiceException {
    name = "InvalidSmsRoleAccessPolicyException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidSmsRoleAccessPolicyException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidSmsRoleAccessPolicyException.prototype);
    }
}
class InvalidSmsRoleTrustRelationshipException extends CognitoIdentityProviderServiceException {
    name = "InvalidSmsRoleTrustRelationshipException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidSmsRoleTrustRelationshipException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidSmsRoleTrustRelationshipException.prototype);
    }
}
class PreconditionNotMetException extends CognitoIdentityProviderServiceException {
    name = "PreconditionNotMetException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "PreconditionNotMetException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PreconditionNotMetException.prototype);
    }
}
class UnsupportedUserStateException extends CognitoIdentityProviderServiceException {
    name = "UnsupportedUserStateException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnsupportedUserStateException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnsupportedUserStateException.prototype);
    }
}
class UsernameExistsException extends CognitoIdentityProviderServiceException {
    name = "UsernameExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UsernameExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UsernameExistsException.prototype);
    }
}
class AliasExistsException extends CognitoIdentityProviderServiceException {
    name = "AliasExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "AliasExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, AliasExistsException.prototype);
    }
}
class InvalidUserPoolConfigurationException extends CognitoIdentityProviderServiceException {
    name = "InvalidUserPoolConfigurationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidUserPoolConfigurationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidUserPoolConfigurationException.prototype);
    }
}
const AuthFlowType = {
    ADMIN_NO_SRP_AUTH: "ADMIN_NO_SRP_AUTH",
    ADMIN_USER_PASSWORD_AUTH: "ADMIN_USER_PASSWORD_AUTH",
    CUSTOM_AUTH: "CUSTOM_AUTH",
    REFRESH_TOKEN: "REFRESH_TOKEN",
    REFRESH_TOKEN_AUTH: "REFRESH_TOKEN_AUTH",
    USER_AUTH: "USER_AUTH",
    USER_PASSWORD_AUTH: "USER_PASSWORD_AUTH",
    USER_SRP_AUTH: "USER_SRP_AUTH",
};
const ChallengeNameType = {
    ADMIN_NO_SRP_AUTH: "ADMIN_NO_SRP_AUTH",
    CUSTOM_CHALLENGE: "CUSTOM_CHALLENGE",
    DEVICE_PASSWORD_VERIFIER: "DEVICE_PASSWORD_VERIFIER",
    DEVICE_SRP_AUTH: "DEVICE_SRP_AUTH",
    EMAIL_OTP: "EMAIL_OTP",
    MFA_SETUP: "MFA_SETUP",
    NEW_PASSWORD_REQUIRED: "NEW_PASSWORD_REQUIRED",
    PASSWORD: "PASSWORD",
    PASSWORD_SRP: "PASSWORD_SRP",
    PASSWORD_VERIFIER: "PASSWORD_VERIFIER",
    SELECT_CHALLENGE: "SELECT_CHALLENGE",
    SELECT_MFA_TYPE: "SELECT_MFA_TYPE",
    SMS_MFA: "SMS_MFA",
    SMS_OTP: "SMS_OTP",
    SOFTWARE_TOKEN_MFA: "SOFTWARE_TOKEN_MFA",
    WEB_AUTHN: "WEB_AUTHN",
};
class InvalidEmailRoleAccessPolicyException extends CognitoIdentityProviderServiceException {
    name = "InvalidEmailRoleAccessPolicyException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidEmailRoleAccessPolicyException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidEmailRoleAccessPolicyException.prototype);
    }
}
class MFAMethodNotFoundException extends CognitoIdentityProviderServiceException {
    name = "MFAMethodNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "MFAMethodNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, MFAMethodNotFoundException.prototype);
    }
}
class PasswordResetRequiredException extends CognitoIdentityProviderServiceException {
    name = "PasswordResetRequiredException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "PasswordResetRequiredException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PasswordResetRequiredException.prototype);
    }
}
class UnsupportedOperationException extends CognitoIdentityProviderServiceException {
    name = "UnsupportedOperationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnsupportedOperationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnsupportedOperationException.prototype);
    }
}
class UserNotConfirmedException extends CognitoIdentityProviderServiceException {
    name = "UserNotConfirmedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UserNotConfirmedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UserNotConfirmedException.prototype);
    }
}
const ChallengeName = {
    Mfa: "Mfa",
    Password: "Password",
};
const ChallengeResponse = {
    Failure: "Failure",
    Success: "Success",
};
const FeedbackValueType = {
    INVALID: "Invalid",
    VALID: "Valid",
};
const EventResponseType = {
    Fail: "Fail",
    InProgress: "InProgress",
    Pass: "Pass",
};
const RiskDecisionType = {
    AccountTakeover: "AccountTakeover",
    Block: "Block",
    NoRisk: "NoRisk",
};
const RiskLevelType = {
    High: "High",
    Low: "Low",
    Medium: "Medium",
};
const EventType = {
    ForgotPassword: "ForgotPassword",
    PasswordChange: "PasswordChange",
    ResendCode: "ResendCode",
    SignIn: "SignIn",
    SignUp: "SignUp",
};
class UserPoolAddOnNotEnabledException extends CognitoIdentityProviderServiceException {
    name = "UserPoolAddOnNotEnabledException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UserPoolAddOnNotEnabledException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UserPoolAddOnNotEnabledException.prototype);
    }
}
class CodeMismatchException extends CognitoIdentityProviderServiceException {
    name = "CodeMismatchException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "CodeMismatchException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, CodeMismatchException.prototype);
    }
}
class ExpiredCodeException extends CognitoIdentityProviderServiceException {
    name = "ExpiredCodeException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ExpiredCodeException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ExpiredCodeException.prototype);
    }
}
class PasswordHistoryPolicyViolationException extends CognitoIdentityProviderServiceException {
    name = "PasswordHistoryPolicyViolationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "PasswordHistoryPolicyViolationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, PasswordHistoryPolicyViolationException.prototype);
    }
}
class SoftwareTokenMFANotFoundException extends CognitoIdentityProviderServiceException {
    name = "SoftwareTokenMFANotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "SoftwareTokenMFANotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, SoftwareTokenMFANotFoundException.prototype);
    }
}
const DeviceRememberedStatusType = {
    NOT_REMEMBERED: "not_remembered",
    REMEMBERED: "remembered",
};
const AdvancedSecurityEnabledModeType = {
    AUDIT: "AUDIT",
    ENFORCED: "ENFORCED",
};
const AdvancedSecurityModeType = {
    AUDIT: "AUDIT",
    ENFORCED: "ENFORCED",
    OFF: "OFF",
};
const AliasAttributeType = {
    EMAIL: "email",
    PHONE_NUMBER: "phone_number",
    PREFERRED_USERNAME: "preferred_username",
};
const AuthFactorType = {
    EMAIL_OTP: "EMAIL_OTP",
    PASSWORD: "PASSWORD",
    SMS_OTP: "SMS_OTP",
    WEB_AUTHN: "WEB_AUTHN",
};
const AssetCategoryType = {
    AUTH_APP_GRAPHIC: "AUTH_APP_GRAPHIC",
    EMAIL_GRAPHIC: "EMAIL_GRAPHIC",
    FAVICON_ICO: "FAVICON_ICO",
    FAVICON_SVG: "FAVICON_SVG",
    FORM_BACKGROUND: "FORM_BACKGROUND",
    FORM_LOGO: "FORM_LOGO",
    IDP_BUTTON_ICON: "IDP_BUTTON_ICON",
    PAGE_BACKGROUND: "PAGE_BACKGROUND",
    PAGE_FOOTER_BACKGROUND: "PAGE_FOOTER_BACKGROUND",
    PAGE_FOOTER_LOGO: "PAGE_FOOTER_LOGO",
    PAGE_HEADER_BACKGROUND: "PAGE_HEADER_BACKGROUND",
    PAGE_HEADER_LOGO: "PAGE_HEADER_LOGO",
    PASSKEY_GRAPHIC: "PASSKEY_GRAPHIC",
    PASSWORD_GRAPHIC: "PASSWORD_GRAPHIC",
    SMS_GRAPHIC: "SMS_GRAPHIC",
};
const AssetExtensionType = {
    ICO: "ICO",
    JPEG: "JPEG",
    PNG: "PNG",
    SVG: "SVG",
    WEBP: "WEBP",
};
const ColorSchemeModeType = {
    DARK: "DARK",
    DYNAMIC: "DYNAMIC",
    LIGHT: "LIGHT",
};
class ConcurrentModificationException extends CognitoIdentityProviderServiceException {
    name = "ConcurrentModificationException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
    }
}
class ForbiddenException extends CognitoIdentityProviderServiceException {
    name = "ForbiddenException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ForbiddenException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ForbiddenException.prototype);
    }
}
const VerifiedAttributeType = {
    EMAIL: "email",
    PHONE_NUMBER: "phone_number",
};
class WebAuthnChallengeNotFoundException extends CognitoIdentityProviderServiceException {
    name = "WebAuthnChallengeNotFoundException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "WebAuthnChallengeNotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, WebAuthnChallengeNotFoundException.prototype);
    }
}
class WebAuthnClientMismatchException extends CognitoIdentityProviderServiceException {
    name = "WebAuthnClientMismatchException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "WebAuthnClientMismatchException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, WebAuthnClientMismatchException.prototype);
    }
}
class WebAuthnCredentialNotSupportedException extends CognitoIdentityProviderServiceException {
    name = "WebAuthnCredentialNotSupportedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "WebAuthnCredentialNotSupportedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, WebAuthnCredentialNotSupportedException.prototype);
    }
}
class WebAuthnNotEnabledException extends CognitoIdentityProviderServiceException {
    name = "WebAuthnNotEnabledException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "WebAuthnNotEnabledException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, WebAuthnNotEnabledException.prototype);
    }
}
class WebAuthnOriginNotAllowedException extends CognitoIdentityProviderServiceException {
    name = "WebAuthnOriginNotAllowedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "WebAuthnOriginNotAllowedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, WebAuthnOriginNotAllowedException.prototype);
    }
}
class WebAuthnRelyingPartyMismatchException extends CognitoIdentityProviderServiceException {
    name = "WebAuthnRelyingPartyMismatchException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "WebAuthnRelyingPartyMismatchException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, WebAuthnRelyingPartyMismatchException.prototype);
    }
}
class DeviceKeyExistsException extends CognitoIdentityProviderServiceException {
    name = "DeviceKeyExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "DeviceKeyExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DeviceKeyExistsException.prototype);
    }
}
class GroupExistsException extends CognitoIdentityProviderServiceException {
    name = "GroupExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "GroupExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, GroupExistsException.prototype);
    }
}
const IdentityProviderTypeType = {
    Facebook: "Facebook",
    Google: "Google",
    LoginWithAmazon: "LoginWithAmazon",
    OIDC: "OIDC",
    SAML: "SAML",
    SignInWithApple: "SignInWithApple",
};
class DuplicateProviderException extends CognitoIdentityProviderServiceException {
    name = "DuplicateProviderException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "DuplicateProviderException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, DuplicateProviderException.prototype);
    }
}
class ManagedLoginBrandingExistsException extends CognitoIdentityProviderServiceException {
    name = "ManagedLoginBrandingExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ManagedLoginBrandingExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ManagedLoginBrandingExistsException.prototype);
    }
}
const TermsEnforcementType = {
    NONE: "NONE",
};
const TermsSourceType = {
    LINK: "LINK",
};
class TermsExistsException extends CognitoIdentityProviderServiceException {
    name = "TermsExistsException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TermsExistsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TermsExistsException.prototype);
    }
}
const UserImportJobStatusType = {
    Created: "Created",
    Expired: "Expired",
    Failed: "Failed",
    InProgress: "InProgress",
    Pending: "Pending",
    Stopped: "Stopped",
    Stopping: "Stopping",
    Succeeded: "Succeeded",
};
const DeletionProtectionType = {
    ACTIVE: "ACTIVE",
    INACTIVE: "INACTIVE",
};
const EmailSendingAccountType = {
    COGNITO_DEFAULT: "COGNITO_DEFAULT",
    DEVELOPER: "DEVELOPER",
};
const CustomEmailSenderLambdaVersionType = {
    V1_0: "V1_0",
};
const CustomSMSSenderLambdaVersionType = {
    V1_0: "V1_0",
};
const PreTokenGenerationLambdaVersionType = {
    V1_0: "V1_0",
    V2_0: "V2_0",
    V3_0: "V3_0",
};
const UserPoolMfaType = {
    OFF: "OFF",
    ON: "ON",
    OPTIONAL: "OPTIONAL",
};
const UsernameAttributeType = {
    EMAIL: "email",
    PHONE_NUMBER: "phone_number",
};
const UserPoolTierType = {
    ESSENTIALS: "ESSENTIALS",
    LITE: "LITE",
    PLUS: "PLUS",
};
const DefaultEmailOptionType = {
    CONFIRM_WITH_CODE: "CONFIRM_WITH_CODE",
    CONFIRM_WITH_LINK: "CONFIRM_WITH_LINK",
};
const StatusType = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
class FeatureUnavailableInTierException extends CognitoIdentityProviderServiceException {
    name = "FeatureUnavailableInTierException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "FeatureUnavailableInTierException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, FeatureUnavailableInTierException.prototype);
    }
}
class TierChangeNotAllowedException extends CognitoIdentityProviderServiceException {
    name = "TierChangeNotAllowedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "TierChangeNotAllowedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TierChangeNotAllowedException.prototype);
    }
}
class UserPoolTaggingException extends CognitoIdentityProviderServiceException {
    name = "UserPoolTaggingException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UserPoolTaggingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UserPoolTaggingException.prototype);
    }
}
const OAuthFlowType = {
    client_credentials: "client_credentials",
    code: "code",
    implicit: "implicit",
};
const ExplicitAuthFlowsType = {
    ADMIN_NO_SRP_AUTH: "ADMIN_NO_SRP_AUTH",
    ALLOW_ADMIN_USER_PASSWORD_AUTH: "ALLOW_ADMIN_USER_PASSWORD_AUTH",
    ALLOW_CUSTOM_AUTH: "ALLOW_CUSTOM_AUTH",
    ALLOW_REFRESH_TOKEN_AUTH: "ALLOW_REFRESH_TOKEN_AUTH",
    ALLOW_USER_AUTH: "ALLOW_USER_AUTH",
    ALLOW_USER_PASSWORD_AUTH: "ALLOW_USER_PASSWORD_AUTH",
    ALLOW_USER_SRP_AUTH: "ALLOW_USER_SRP_AUTH",
    CUSTOM_AUTH_FLOW_ONLY: "CUSTOM_AUTH_FLOW_ONLY",
    USER_PASSWORD_AUTH: "USER_PASSWORD_AUTH",
};
const PreventUserExistenceErrorTypes = {
    ENABLED: "ENABLED",
    LEGACY: "LEGACY",
};
const FeatureType = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const TimeUnitsType = {
    DAYS: "days",
    HOURS: "hours",
    MINUTES: "minutes",
    SECONDS: "seconds",
};
class InvalidOAuthFlowException extends CognitoIdentityProviderServiceException {
    name = "InvalidOAuthFlowException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "InvalidOAuthFlowException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, InvalidOAuthFlowException.prototype);
    }
}
class ScopeDoesNotExistException extends CognitoIdentityProviderServiceException {
    name = "ScopeDoesNotExistException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "ScopeDoesNotExistException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ScopeDoesNotExistException.prototype);
    }
}
class UnsupportedIdentityProviderException extends CognitoIdentityProviderServiceException {
    name = "UnsupportedIdentityProviderException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnsupportedIdentityProviderException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnsupportedIdentityProviderException.prototype);
    }
}
const CompromisedCredentialsEventActionType = {
    BLOCK: "BLOCK",
    NO_ACTION: "NO_ACTION",
};
const EventFilterType = {
    PASSWORD_CHANGE: "PASSWORD_CHANGE",
    SIGN_IN: "SIGN_IN",
    SIGN_UP: "SIGN_UP",
};
const DomainStatusType = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    FAILED: "FAILED",
    UPDATING: "UPDATING",
};
const EventSourceName = {
    USER_AUTH_EVENTS: "userAuthEvents",
    USER_NOTIFICATION: "userNotification",
};
const LogLevel = {
    ERROR: "ERROR",
    INFO: "INFO",
};
const AdminAddUserToGroupRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const AdminConfirmSignUpRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const AttributeTypeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Value && { Value: smithyClient.SENSITIVE_STRING }),
});
const AdminCreateUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
    ...(obj.UserAttributes && {
        UserAttributes: obj.UserAttributes.map((item) => AttributeTypeFilterSensitiveLog(item)),
    }),
    ...(obj.ValidationData && {
        ValidationData: obj.ValidationData.map((item) => AttributeTypeFilterSensitiveLog(item)),
    }),
    ...(obj.TemporaryPassword && { TemporaryPassword: smithyClient.SENSITIVE_STRING }),
});
const UserTypeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
    ...(obj.Attributes && { Attributes: obj.Attributes.map((item) => AttributeTypeFilterSensitiveLog(item)) }),
});
const AdminCreateUserResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.User && { User: UserTypeFilterSensitiveLog(obj.User) }),
});
const AdminDeleteUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const AdminDeleteUserAttributesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const AdminDisableUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const AdminEnableUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const AdminForgetDeviceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const AdminGetDeviceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const DeviceTypeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DeviceAttributes && {
        DeviceAttributes: obj.DeviceAttributes.map((item) => AttributeTypeFilterSensitiveLog(item)),
    }),
});
const AdminGetDeviceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Device && { Device: DeviceTypeFilterSensitiveLog(obj.Device) }),
});
const AdminGetUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const AdminGetUserResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
    ...(obj.UserAttributes && {
        UserAttributes: obj.UserAttributes.map((item) => AttributeTypeFilterSensitiveLog(item)),
    }),
});
const AdminInitiateAuthRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
    ...(obj.AuthParameters && { AuthParameters: smithyClient.SENSITIVE_STRING }),
    ...(obj.Session && { Session: smithyClient.SENSITIVE_STRING }),
});
const AuthenticationResultTypeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
    ...(obj.RefreshToken && { RefreshToken: smithyClient.SENSITIVE_STRING }),
    ...(obj.IdToken && { IdToken: smithyClient.SENSITIVE_STRING }),
});
const AdminInitiateAuthResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Session && { Session: smithyClient.SENSITIVE_STRING }),
    ...(obj.AuthenticationResult && {
        AuthenticationResult: AuthenticationResultTypeFilterSensitiveLog(obj.AuthenticationResult),
    }),
});
const AdminListDevicesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const AdminListDevicesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
const AdminListGroupsForUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const AdminListUserAuthEventsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const AdminRemoveUserFromGroupRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const AdminResetUserPasswordRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const AdminRespondToAuthChallengeRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
    ...(obj.ChallengeResponses && { ChallengeResponses: smithyClient.SENSITIVE_STRING }),
    ...(obj.Session && { Session: smithyClient.SENSITIVE_STRING }),
});
const AdminRespondToAuthChallengeResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Session && { Session: smithyClient.SENSITIVE_STRING }),
    ...(obj.AuthenticationResult && {
        AuthenticationResult: AuthenticationResultTypeFilterSensitiveLog(obj.AuthenticationResult),
    }),
});
const AdminSetUserMFAPreferenceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const AdminSetUserPasswordRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
    ...(obj.Password && { Password: smithyClient.SENSITIVE_STRING }),
});
const AdminSetUserSettingsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const AdminUpdateAuthEventFeedbackRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const AdminUpdateDeviceStatusRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const AdminUpdateUserAttributesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
    ...(obj.UserAttributes && {
        UserAttributes: obj.UserAttributes.map((item) => AttributeTypeFilterSensitiveLog(item)),
    }),
});
const AdminUserGlobalSignOutRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const AssociateSoftwareTokenRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
    ...(obj.Session && { Session: smithyClient.SENSITIVE_STRING }),
});
const AssociateSoftwareTokenResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SecretCode && { SecretCode: smithyClient.SENSITIVE_STRING }),
    ...(obj.Session && { Session: smithyClient.SENSITIVE_STRING }),
});
const ChangePasswordRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PreviousPassword && { PreviousPassword: smithyClient.SENSITIVE_STRING }),
    ...(obj.ProposedPassword && { ProposedPassword: smithyClient.SENSITIVE_STRING }),
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
});
const CompleteWebAuthnRegistrationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
});
const ConfirmDeviceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
});
const UserContextDataTypeFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ConfirmForgotPasswordRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
    ...(obj.SecretHash && { SecretHash: smithyClient.SENSITIVE_STRING }),
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
    ...(obj.Password && { Password: smithyClient.SENSITIVE_STRING }),
    ...(obj.UserContextData && { UserContextData: smithyClient.SENSITIVE_STRING }),
});
const ConfirmSignUpRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
    ...(obj.SecretHash && { SecretHash: smithyClient.SENSITIVE_STRING }),
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
    ...(obj.UserContextData && { UserContextData: smithyClient.SENSITIVE_STRING }),
    ...(obj.Session && { Session: smithyClient.SENSITIVE_STRING }),
});
const ConfirmSignUpResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Session && { Session: smithyClient.SENSITIVE_STRING }),
});
const CreateManagedLoginBrandingRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
});
const CreateTermsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
});
const TermsTypeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
});
const CreateTermsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Terms && { Terms: TermsTypeFilterSensitiveLog(obj.Terms) }),
});
const UserPoolClientTypeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
    ...(obj.ClientSecret && { ClientSecret: smithyClient.SENSITIVE_STRING }),
});
const CreateUserPoolClientResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserPoolClient && { UserPoolClient: UserPoolClientTypeFilterSensitiveLog(obj.UserPoolClient) }),
});
const DeleteUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
});
const DeleteUserAttributesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
});
const DeleteUserPoolClientRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
});
const DeleteWebAuthnCredentialRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
});
const DescribeManagedLoginBrandingByClientRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
});
const DescribeRiskConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
});
const RiskConfigurationTypeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
});
const DescribeRiskConfigurationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RiskConfiguration && { RiskConfiguration: RiskConfigurationTypeFilterSensitiveLog(obj.RiskConfiguration) }),
});
const DescribeTermsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Terms && { Terms: TermsTypeFilterSensitiveLog(obj.Terms) }),
});
const DescribeUserPoolClientRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
});
const DescribeUserPoolClientResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserPoolClient && { UserPoolClient: UserPoolClientTypeFilterSensitiveLog(obj.UserPoolClient) }),
});
const ForgetDeviceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
});
const ForgotPasswordRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
    ...(obj.SecretHash && { SecretHash: smithyClient.SENSITIVE_STRING }),
    ...(obj.UserContextData && { UserContextData: smithyClient.SENSITIVE_STRING }),
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const GetDeviceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
});
const GetDeviceResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Device && { Device: DeviceTypeFilterSensitiveLog(obj.Device) }),
});
const GetTokensFromRefreshTokenRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RefreshToken && { RefreshToken: smithyClient.SENSITIVE_STRING }),
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
    ...(obj.ClientSecret && { ClientSecret: smithyClient.SENSITIVE_STRING }),
});

class RefreshTokenReuseException extends CognitoIdentityProviderServiceException {
    name = "RefreshTokenReuseException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "RefreshTokenReuseException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, RefreshTokenReuseException.prototype);
    }
}
const UserVerificationType = {
    PREFERRED: "preferred",
    REQUIRED: "required",
};
class UnauthorizedException extends CognitoIdentityProviderServiceException {
    name = "UnauthorizedException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnauthorizedException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
    }
}
class UnsupportedTokenTypeException extends CognitoIdentityProviderServiceException {
    name = "UnsupportedTokenTypeException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "UnsupportedTokenTypeException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, UnsupportedTokenTypeException.prototype);
    }
}
class WebAuthnConfigurationMissingException extends CognitoIdentityProviderServiceException {
    name = "WebAuthnConfigurationMissingException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "WebAuthnConfigurationMissingException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, WebAuthnConfigurationMissingException.prototype);
    }
}
class EnableSoftwareTokenMFAException extends CognitoIdentityProviderServiceException {
    name = "EnableSoftwareTokenMFAException";
    $fault = "client";
    constructor(opts) {
        super({
            name: "EnableSoftwareTokenMFAException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, EnableSoftwareTokenMFAException.prototype);
    }
}
const VerifySoftwareTokenResponseType = {
    ERROR: "ERROR",
    SUCCESS: "SUCCESS",
};
const GetTokensFromRefreshTokenResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AuthenticationResult && {
        AuthenticationResult: AuthenticationResultTypeFilterSensitiveLog(obj.AuthenticationResult),
    }),
});
const GetUICustomizationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
});
const UICustomizationTypeFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
});
const GetUICustomizationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UICustomization && { UICustomization: UICustomizationTypeFilterSensitiveLog(obj.UICustomization) }),
});
const GetUserRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
});
const GetUserResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
    ...(obj.UserAttributes && {
        UserAttributes: obj.UserAttributes.map((item) => AttributeTypeFilterSensitiveLog(item)),
    }),
});
const GetUserAttributeVerificationCodeRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
});
const GetUserAuthFactorsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
});
const GetUserAuthFactorsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const GlobalSignOutRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
});
const InitiateAuthRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AuthParameters && { AuthParameters: smithyClient.SENSITIVE_STRING }),
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
    ...(obj.UserContextData && { UserContextData: smithyClient.SENSITIVE_STRING }),
    ...(obj.Session && { Session: smithyClient.SENSITIVE_STRING }),
});
const InitiateAuthResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Session && { Session: smithyClient.SENSITIVE_STRING }),
    ...(obj.AuthenticationResult && {
        AuthenticationResult: AuthenticationResultTypeFilterSensitiveLog(obj.AuthenticationResult),
    }),
});
const ListDevicesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
});
const ListDevicesResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
const UserPoolClientDescriptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
});
const ListUserPoolClientsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserPoolClients && {
        UserPoolClients: obj.UserPoolClients.map((item) => UserPoolClientDescriptionFilterSensitiveLog(item)),
    }),
});
const ListUsersResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Users && { Users: obj.Users.map((item) => UserTypeFilterSensitiveLog(item)) }),
});
const ListUsersInGroupResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Users && { Users: obj.Users.map((item) => UserTypeFilterSensitiveLog(item)) }),
});
const ListWebAuthnCredentialsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
});
const ResendConfirmationCodeRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
    ...(obj.SecretHash && { SecretHash: smithyClient.SENSITIVE_STRING }),
    ...(obj.UserContextData && { UserContextData: smithyClient.SENSITIVE_STRING }),
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
});
const RespondToAuthChallengeRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
    ...(obj.Session && { Session: smithyClient.SENSITIVE_STRING }),
    ...(obj.ChallengeResponses && { ChallengeResponses: smithyClient.SENSITIVE_STRING }),
    ...(obj.UserContextData && { UserContextData: smithyClient.SENSITIVE_STRING }),
});
const RespondToAuthChallengeResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Session && { Session: smithyClient.SENSITIVE_STRING }),
    ...(obj.AuthenticationResult && {
        AuthenticationResult: AuthenticationResultTypeFilterSensitiveLog(obj.AuthenticationResult),
    }),
});
const RevokeTokenRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Token && { Token: smithyClient.SENSITIVE_STRING }),
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
    ...(obj.ClientSecret && { ClientSecret: smithyClient.SENSITIVE_STRING }),
});
const SetRiskConfigurationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
});
const SetRiskConfigurationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RiskConfiguration && { RiskConfiguration: RiskConfigurationTypeFilterSensitiveLog(obj.RiskConfiguration) }),
});
const SetUICustomizationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
});
const SetUICustomizationResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UICustomization && { UICustomization: UICustomizationTypeFilterSensitiveLog(obj.UICustomization) }),
});
const SetUserMFAPreferenceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
});
const SetUserSettingsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
});
const SignUpRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
    ...(obj.SecretHash && { SecretHash: smithyClient.SENSITIVE_STRING }),
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
    ...(obj.Password && { Password: smithyClient.SENSITIVE_STRING }),
    ...(obj.UserAttributes && {
        UserAttributes: obj.UserAttributes.map((item) => AttributeTypeFilterSensitiveLog(item)),
    }),
    ...(obj.ValidationData && {
        ValidationData: obj.ValidationData.map((item) => AttributeTypeFilterSensitiveLog(item)),
    }),
    ...(obj.UserContextData && { UserContextData: smithyClient.SENSITIVE_STRING }),
});
const SignUpResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Session && { Session: smithyClient.SENSITIVE_STRING }),
});
const StartWebAuthnRegistrationRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
});
const UpdateAuthEventFeedbackRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Username && { Username: smithyClient.SENSITIVE_STRING }),
    ...(obj.FeedbackToken && { FeedbackToken: smithyClient.SENSITIVE_STRING }),
});
const UpdateDeviceStatusRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
});
const UpdateTermsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Terms && { Terms: TermsTypeFilterSensitiveLog(obj.Terms) }),
});
const UpdateUserAttributesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserAttributes && {
        UserAttributes: obj.UserAttributes.map((item) => AttributeTypeFilterSensitiveLog(item)),
    }),
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
});
const UpdateUserPoolClientRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientId && { ClientId: smithyClient.SENSITIVE_STRING }),
});
const UpdateUserPoolClientResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserPoolClient && { UserPoolClient: UserPoolClientTypeFilterSensitiveLog(obj.UserPoolClient) }),
});
const VerifySoftwareTokenRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
    ...(obj.Session && { Session: smithyClient.SENSITIVE_STRING }),
    ...(obj.UserCode && { UserCode: smithyClient.SENSITIVE_STRING }),
});
const VerifySoftwareTokenResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Session && { Session: smithyClient.SENSITIVE_STRING }),
});
const VerifyUserAttributeRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.AccessToken && { AccessToken: smithyClient.SENSITIVE_STRING }),
});

const se_AddCustomAttributesCommand = async (input, context) => {
    const headers = sharedHeaders("AddCustomAttributes");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminAddUserToGroupCommand = async (input, context) => {
    const headers = sharedHeaders("AdminAddUserToGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminConfirmSignUpCommand = async (input, context) => {
    const headers = sharedHeaders("AdminConfirmSignUp");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminCreateUserCommand = async (input, context) => {
    const headers = sharedHeaders("AdminCreateUser");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminDeleteUserCommand = async (input, context) => {
    const headers = sharedHeaders("AdminDeleteUser");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminDeleteUserAttributesCommand = async (input, context) => {
    const headers = sharedHeaders("AdminDeleteUserAttributes");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminDisableProviderForUserCommand = async (input, context) => {
    const headers = sharedHeaders("AdminDisableProviderForUser");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminDisableUserCommand = async (input, context) => {
    const headers = sharedHeaders("AdminDisableUser");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminEnableUserCommand = async (input, context) => {
    const headers = sharedHeaders("AdminEnableUser");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminForgetDeviceCommand = async (input, context) => {
    const headers = sharedHeaders("AdminForgetDevice");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminGetDeviceCommand = async (input, context) => {
    const headers = sharedHeaders("AdminGetDevice");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminGetUserCommand = async (input, context) => {
    const headers = sharedHeaders("AdminGetUser");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminInitiateAuthCommand = async (input, context) => {
    const headers = sharedHeaders("AdminInitiateAuth");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminLinkProviderForUserCommand = async (input, context) => {
    const headers = sharedHeaders("AdminLinkProviderForUser");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminListDevicesCommand = async (input, context) => {
    const headers = sharedHeaders("AdminListDevices");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminListGroupsForUserCommand = async (input, context) => {
    const headers = sharedHeaders("AdminListGroupsForUser");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminListUserAuthEventsCommand = async (input, context) => {
    const headers = sharedHeaders("AdminListUserAuthEvents");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminRemoveUserFromGroupCommand = async (input, context) => {
    const headers = sharedHeaders("AdminRemoveUserFromGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminResetUserPasswordCommand = async (input, context) => {
    const headers = sharedHeaders("AdminResetUserPassword");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminRespondToAuthChallengeCommand = async (input, context) => {
    const headers = sharedHeaders("AdminRespondToAuthChallenge");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminSetUserMFAPreferenceCommand = async (input, context) => {
    const headers = sharedHeaders("AdminSetUserMFAPreference");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminSetUserPasswordCommand = async (input, context) => {
    const headers = sharedHeaders("AdminSetUserPassword");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminSetUserSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("AdminSetUserSettings");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminUpdateAuthEventFeedbackCommand = async (input, context) => {
    const headers = sharedHeaders("AdminUpdateAuthEventFeedback");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminUpdateDeviceStatusCommand = async (input, context) => {
    const headers = sharedHeaders("AdminUpdateDeviceStatus");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminUpdateUserAttributesCommand = async (input, context) => {
    const headers = sharedHeaders("AdminUpdateUserAttributes");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdminUserGlobalSignOutCommand = async (input, context) => {
    const headers = sharedHeaders("AdminUserGlobalSignOut");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateSoftwareTokenCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateSoftwareToken");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ChangePasswordCommand = async (input, context) => {
    const headers = sharedHeaders("ChangePassword");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CompleteWebAuthnRegistrationCommand = async (input, context) => {
    const headers = sharedHeaders("CompleteWebAuthnRegistration");
    let body;
    body = JSON.stringify(se_CompleteWebAuthnRegistrationRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ConfirmDeviceCommand = async (input, context) => {
    const headers = sharedHeaders("ConfirmDevice");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ConfirmForgotPasswordCommand = async (input, context) => {
    const headers = sharedHeaders("ConfirmForgotPassword");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ConfirmSignUpCommand = async (input, context) => {
    const headers = sharedHeaders("ConfirmSignUp");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateGroupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateIdentityProviderCommand = async (input, context) => {
    const headers = sharedHeaders("CreateIdentityProvider");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateManagedLoginBrandingCommand = async (input, context) => {
    const headers = sharedHeaders("CreateManagedLoginBranding");
    let body;
    body = JSON.stringify(se_CreateManagedLoginBrandingRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateResourceServerCommand = async (input, context) => {
    const headers = sharedHeaders("CreateResourceServer");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTermsCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTerms");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateUserImportJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateUserImportJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateUserPoolCommand = async (input, context) => {
    const headers = sharedHeaders("CreateUserPool");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateUserPoolClientCommand = async (input, context) => {
    const headers = sharedHeaders("CreateUserPoolClient");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateUserPoolDomainCommand = async (input, context) => {
    const headers = sharedHeaders("CreateUserPoolDomain");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteIdentityProviderCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteIdentityProvider");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteManagedLoginBrandingCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteManagedLoginBranding");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteResourceServerCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteResourceServer");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTermsCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTerms");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteUserCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteUser");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteUserAttributesCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteUserAttributes");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteUserPoolCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteUserPool");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteUserPoolClientCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteUserPoolClient");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteUserPoolDomainCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteUserPoolDomain");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteWebAuthnCredentialCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteWebAuthnCredential");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeIdentityProviderCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeIdentityProvider");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeManagedLoginBrandingCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeManagedLoginBranding");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeManagedLoginBrandingByClientCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeManagedLoginBrandingByClient");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeResourceServerCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeResourceServer");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeRiskConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeRiskConfiguration");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTermsCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTerms");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeUserImportJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeUserImportJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeUserPoolCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeUserPool");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeUserPoolClientCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeUserPoolClient");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeUserPoolDomainCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeUserPoolDomain");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ForgetDeviceCommand = async (input, context) => {
    const headers = sharedHeaders("ForgetDevice");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ForgotPasswordCommand = async (input, context) => {
    const headers = sharedHeaders("ForgotPassword");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetCSVHeaderCommand = async (input, context) => {
    const headers = sharedHeaders("GetCSVHeader");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetDeviceCommand = async (input, context) => {
    const headers = sharedHeaders("GetDevice");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetGroupCommand = async (input, context) => {
    const headers = sharedHeaders("GetGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetIdentityProviderByIdentifierCommand = async (input, context) => {
    const headers = sharedHeaders("GetIdentityProviderByIdentifier");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetLogDeliveryConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("GetLogDeliveryConfiguration");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetSigningCertificateCommand = async (input, context) => {
    const headers = sharedHeaders("GetSigningCertificate");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetTokensFromRefreshTokenCommand = async (input, context) => {
    const headers = sharedHeaders("GetTokensFromRefreshToken");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetUICustomizationCommand = async (input, context) => {
    const headers = sharedHeaders("GetUICustomization");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetUserCommand = async (input, context) => {
    const headers = sharedHeaders("GetUser");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetUserAttributeVerificationCodeCommand = async (input, context) => {
    const headers = sharedHeaders("GetUserAttributeVerificationCode");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetUserAuthFactorsCommand = async (input, context) => {
    const headers = sharedHeaders("GetUserAuthFactors");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetUserPoolMfaConfigCommand = async (input, context) => {
    const headers = sharedHeaders("GetUserPoolMfaConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GlobalSignOutCommand = async (input, context) => {
    const headers = sharedHeaders("GlobalSignOut");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_InitiateAuthCommand = async (input, context) => {
    const headers = sharedHeaders("InitiateAuth");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListDevicesCommand = async (input, context) => {
    const headers = sharedHeaders("ListDevices");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListGroups");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListIdentityProvidersCommand = async (input, context) => {
    const headers = sharedHeaders("ListIdentityProviders");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListResourceServersCommand = async (input, context) => {
    const headers = sharedHeaders("ListResourceServers");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTagsForResourceCommand = async (input, context) => {
    const headers = sharedHeaders("ListTagsForResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTermsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTerms");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListUserImportJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListUserImportJobs");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListUserPoolClientsCommand = async (input, context) => {
    const headers = sharedHeaders("ListUserPoolClients");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListUserPoolsCommand = async (input, context) => {
    const headers = sharedHeaders("ListUserPools");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListUsersCommand = async (input, context) => {
    const headers = sharedHeaders("ListUsers");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListUsersInGroupCommand = async (input, context) => {
    const headers = sharedHeaders("ListUsersInGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListWebAuthnCredentialsCommand = async (input, context) => {
    const headers = sharedHeaders("ListWebAuthnCredentials");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ResendConfirmationCodeCommand = async (input, context) => {
    const headers = sharedHeaders("ResendConfirmationCode");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RespondToAuthChallengeCommand = async (input, context) => {
    const headers = sharedHeaders("RespondToAuthChallenge");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RevokeTokenCommand = async (input, context) => {
    const headers = sharedHeaders("RevokeToken");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetLogDeliveryConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("SetLogDeliveryConfiguration");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetRiskConfigurationCommand = async (input, context) => {
    const headers = sharedHeaders("SetRiskConfiguration");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetUICustomizationCommand = async (input, context) => {
    const headers = sharedHeaders("SetUICustomization");
    let body;
    body = JSON.stringify(se_SetUICustomizationRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetUserMFAPreferenceCommand = async (input, context) => {
    const headers = sharedHeaders("SetUserMFAPreference");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetUserPoolMfaConfigCommand = async (input, context) => {
    const headers = sharedHeaders("SetUserPoolMfaConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SetUserSettingsCommand = async (input, context) => {
    const headers = sharedHeaders("SetUserSettings");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SignUpCommand = async (input, context) => {
    const headers = sharedHeaders("SignUp");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartUserImportJobCommand = async (input, context) => {
    const headers = sharedHeaders("StartUserImportJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartWebAuthnRegistrationCommand = async (input, context) => {
    const headers = sharedHeaders("StartWebAuthnRegistration");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopUserImportJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopUserImportJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("TagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UntagResourceCommand = async (input, context) => {
    const headers = sharedHeaders("UntagResource");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateAuthEventFeedbackCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAuthEventFeedback");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateDeviceStatusCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDeviceStatus");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateGroupCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateIdentityProviderCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateIdentityProvider");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateManagedLoginBrandingCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateManagedLoginBranding");
    let body;
    body = JSON.stringify(se_UpdateManagedLoginBrandingRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateResourceServerCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateResourceServer");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateTermsCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTerms");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateUserAttributesCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateUserAttributes");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateUserPoolCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateUserPool");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateUserPoolClientCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateUserPoolClient");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateUserPoolDomainCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateUserPoolDomain");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_VerifySoftwareTokenCommand = async (input, context) => {
    const headers = sharedHeaders("VerifySoftwareToken");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_VerifyUserAttributeCommand = async (input, context) => {
    const headers = sharedHeaders("VerifyUserAttribute");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_AddCustomAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminAddUserToGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_AdminConfirmSignUpCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminCreateUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_AdminCreateUserResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminDeleteUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_AdminDeleteUserAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminDisableProviderForUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminDisableUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminEnableUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminForgetDeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_AdminGetDeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_AdminGetDeviceResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminGetUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_AdminGetUserResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminInitiateAuthCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminLinkProviderForUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminListDevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_AdminListDevicesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminListGroupsForUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_AdminListGroupsForUserResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminListUserAuthEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_AdminListUserAuthEventsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminRemoveUserFromGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_AdminResetUserPasswordCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminRespondToAuthChallengeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminSetUserMFAPreferenceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminSetUserPasswordCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminSetUserSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminUpdateAuthEventFeedbackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminUpdateDeviceStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminUpdateUserAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdminUserGlobalSignOutCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateSoftwareTokenCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ChangePasswordCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CompleteWebAuthnRegistrationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ConfirmDeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ConfirmForgotPasswordCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ConfirmSignUpCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateGroupResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateIdentityProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateIdentityProviderResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateManagedLoginBrandingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateManagedLoginBrandingResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateResourceServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTermsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateTermsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateUserImportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateUserImportJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateUserPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateUserPoolResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateUserPoolClientCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateUserPoolClientResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateUserPoolDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteIdentityProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteManagedLoginBrandingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteResourceServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteTermsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteUserAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteUserPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteUserPoolClientCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteUserPoolDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteWebAuthnCredentialCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIdentityProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeIdentityProviderResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeManagedLoginBrandingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeManagedLoginBrandingResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeManagedLoginBrandingByClientCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeManagedLoginBrandingByClientResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeResourceServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeRiskConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeRiskConfigurationResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTermsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeTermsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeUserImportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeUserImportJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeUserPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeUserPoolResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeUserPoolClientCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeUserPoolClientResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeUserPoolDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ForgetDeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ForgotPasswordCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetCSVHeaderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetDeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetDeviceResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetGroupResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetIdentityProviderByIdentifierCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetIdentityProviderByIdentifierResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetLogDeliveryConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetSigningCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTokensFromRefreshTokenCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetUICustomizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetUICustomizationResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetUserCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetUserAttributeVerificationCodeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetUserAuthFactorsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetUserPoolMfaConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GlobalSignOutCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_InitiateAuthCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListDevicesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListGroupsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListIdentityProvidersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListIdentityProvidersResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListResourceServersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTermsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListTermsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListUserImportJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListUserImportJobsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListUserPoolClientsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListUserPoolsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListUserPoolsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListUsersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListUsersResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListUsersInGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListUsersInGroupResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListWebAuthnCredentialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListWebAuthnCredentialsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ResendConfirmationCodeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RespondToAuthChallengeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RevokeTokenCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SetLogDeliveryConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SetRiskConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_SetRiskConfigurationResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SetUICustomizationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_SetUICustomizationResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SetUserMFAPreferenceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SetUserPoolMfaConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SetUserSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SignUpCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartUserImportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StartUserImportJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartWebAuthnRegistrationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StartWebAuthnRegistrationResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopUserImportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StopUserImportJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateAuthEventFeedbackCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateDeviceStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateGroupResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateIdentityProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateIdentityProviderResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateManagedLoginBrandingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateManagedLoginBrandingResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateResourceServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateTermsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateTermsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateUserAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateUserPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateUserPoolClientCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateUserPoolClientResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateUserPoolDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_VerifySoftwareTokenCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_VerifyUserAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = smithyClient._json(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentityprovider#InternalErrorException":
            throw await de_InternalErrorExceptionRes(parsedOutput);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentityprovider#InvalidParameterException":
            throw await de_InvalidParameterExceptionRes(parsedOutput);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentityprovider#NotAuthorizedException":
            throw await de_NotAuthorizedExceptionRes(parsedOutput);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentityprovider#ResourceNotFoundException":
            throw await de_ResourceNotFoundExceptionRes(parsedOutput);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentityprovider#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput);
        case "UserImportInProgressException":
        case "com.amazonaws.cognitoidentityprovider#UserImportInProgressException":
            throw await de_UserImportInProgressExceptionRes(parsedOutput);
        case "UserNotFoundException":
        case "com.amazonaws.cognitoidentityprovider#UserNotFoundException":
            throw await de_UserNotFoundExceptionRes(parsedOutput);
        case "InvalidLambdaResponseException":
        case "com.amazonaws.cognitoidentityprovider#InvalidLambdaResponseException":
            throw await de_InvalidLambdaResponseExceptionRes(parsedOutput);
        case "LimitExceededException":
        case "com.amazonaws.cognitoidentityprovider#LimitExceededException":
            throw await de_LimitExceededExceptionRes(parsedOutput);
        case "TooManyFailedAttemptsException":
        case "com.amazonaws.cognitoidentityprovider#TooManyFailedAttemptsException":
            throw await de_TooManyFailedAttemptsExceptionRes(parsedOutput);
        case "UnexpectedLambdaException":
        case "com.amazonaws.cognitoidentityprovider#UnexpectedLambdaException":
            throw await de_UnexpectedLambdaExceptionRes(parsedOutput);
        case "UserLambdaValidationException":
        case "com.amazonaws.cognitoidentityprovider#UserLambdaValidationException":
            throw await de_UserLambdaValidationExceptionRes(parsedOutput);
        case "CodeDeliveryFailureException":
        case "com.amazonaws.cognitoidentityprovider#CodeDeliveryFailureException":
            throw await de_CodeDeliveryFailureExceptionRes(parsedOutput);
        case "InvalidPasswordException":
        case "com.amazonaws.cognitoidentityprovider#InvalidPasswordException":
            throw await de_InvalidPasswordExceptionRes(parsedOutput);
        case "InvalidSmsRoleAccessPolicyException":
        case "com.amazonaws.cognitoidentityprovider#InvalidSmsRoleAccessPolicyException":
            throw await de_InvalidSmsRoleAccessPolicyExceptionRes(parsedOutput);
        case "InvalidSmsRoleTrustRelationshipException":
        case "com.amazonaws.cognitoidentityprovider#InvalidSmsRoleTrustRelationshipException":
            throw await de_InvalidSmsRoleTrustRelationshipExceptionRes(parsedOutput);
        case "PreconditionNotMetException":
        case "com.amazonaws.cognitoidentityprovider#PreconditionNotMetException":
            throw await de_PreconditionNotMetExceptionRes(parsedOutput);
        case "UnsupportedUserStateException":
        case "com.amazonaws.cognitoidentityprovider#UnsupportedUserStateException":
            throw await de_UnsupportedUserStateExceptionRes(parsedOutput);
        case "UsernameExistsException":
        case "com.amazonaws.cognitoidentityprovider#UsernameExistsException":
            throw await de_UsernameExistsExceptionRes(parsedOutput);
        case "AliasExistsException":
        case "com.amazonaws.cognitoidentityprovider#AliasExistsException":
            throw await de_AliasExistsExceptionRes(parsedOutput);
        case "InvalidUserPoolConfigurationException":
        case "com.amazonaws.cognitoidentityprovider#InvalidUserPoolConfigurationException":
            throw await de_InvalidUserPoolConfigurationExceptionRes(parsedOutput);
        case "InvalidEmailRoleAccessPolicyException":
        case "com.amazonaws.cognitoidentityprovider#InvalidEmailRoleAccessPolicyException":
            throw await de_InvalidEmailRoleAccessPolicyExceptionRes(parsedOutput);
        case "MFAMethodNotFoundException":
        case "com.amazonaws.cognitoidentityprovider#MFAMethodNotFoundException":
            throw await de_MFAMethodNotFoundExceptionRes(parsedOutput);
        case "PasswordResetRequiredException":
        case "com.amazonaws.cognitoidentityprovider#PasswordResetRequiredException":
            throw await de_PasswordResetRequiredExceptionRes(parsedOutput);
        case "UnsupportedOperationException":
        case "com.amazonaws.cognitoidentityprovider#UnsupportedOperationException":
            throw await de_UnsupportedOperationExceptionRes(parsedOutput);
        case "UserNotConfirmedException":
        case "com.amazonaws.cognitoidentityprovider#UserNotConfirmedException":
            throw await de_UserNotConfirmedExceptionRes(parsedOutput);
        case "UserPoolAddOnNotEnabledException":
        case "com.amazonaws.cognitoidentityprovider#UserPoolAddOnNotEnabledException":
            throw await de_UserPoolAddOnNotEnabledExceptionRes(parsedOutput);
        case "CodeMismatchException":
        case "com.amazonaws.cognitoidentityprovider#CodeMismatchException":
            throw await de_CodeMismatchExceptionRes(parsedOutput);
        case "ExpiredCodeException":
        case "com.amazonaws.cognitoidentityprovider#ExpiredCodeException":
            throw await de_ExpiredCodeExceptionRes(parsedOutput);
        case "PasswordHistoryPolicyViolationException":
        case "com.amazonaws.cognitoidentityprovider#PasswordHistoryPolicyViolationException":
            throw await de_PasswordHistoryPolicyViolationExceptionRes(parsedOutput);
        case "SoftwareTokenMFANotFoundException":
        case "com.amazonaws.cognitoidentityprovider#SoftwareTokenMFANotFoundException":
            throw await de_SoftwareTokenMFANotFoundExceptionRes(parsedOutput);
        case "ConcurrentModificationException":
        case "com.amazonaws.cognitoidentityprovider#ConcurrentModificationException":
            throw await de_ConcurrentModificationExceptionRes(parsedOutput);
        case "ForbiddenException":
        case "com.amazonaws.cognitoidentityprovider#ForbiddenException":
            throw await de_ForbiddenExceptionRes(parsedOutput);
        case "WebAuthnChallengeNotFoundException":
        case "com.amazonaws.cognitoidentityprovider#WebAuthnChallengeNotFoundException":
            throw await de_WebAuthnChallengeNotFoundExceptionRes(parsedOutput);
        case "WebAuthnClientMismatchException":
        case "com.amazonaws.cognitoidentityprovider#WebAuthnClientMismatchException":
            throw await de_WebAuthnClientMismatchExceptionRes(parsedOutput);
        case "WebAuthnCredentialNotSupportedException":
        case "com.amazonaws.cognitoidentityprovider#WebAuthnCredentialNotSupportedException":
            throw await de_WebAuthnCredentialNotSupportedExceptionRes(parsedOutput);
        case "WebAuthnNotEnabledException":
        case "com.amazonaws.cognitoidentityprovider#WebAuthnNotEnabledException":
            throw await de_WebAuthnNotEnabledExceptionRes(parsedOutput);
        case "WebAuthnOriginNotAllowedException":
        case "com.amazonaws.cognitoidentityprovider#WebAuthnOriginNotAllowedException":
            throw await de_WebAuthnOriginNotAllowedExceptionRes(parsedOutput);
        case "WebAuthnRelyingPartyMismatchException":
        case "com.amazonaws.cognitoidentityprovider#WebAuthnRelyingPartyMismatchException":
            throw await de_WebAuthnRelyingPartyMismatchExceptionRes(parsedOutput);
        case "DeviceKeyExistsException":
        case "com.amazonaws.cognitoidentityprovider#DeviceKeyExistsException":
            throw await de_DeviceKeyExistsExceptionRes(parsedOutput);
        case "GroupExistsException":
        case "com.amazonaws.cognitoidentityprovider#GroupExistsException":
            throw await de_GroupExistsExceptionRes(parsedOutput);
        case "DuplicateProviderException":
        case "com.amazonaws.cognitoidentityprovider#DuplicateProviderException":
            throw await de_DuplicateProviderExceptionRes(parsedOutput);
        case "ManagedLoginBrandingExistsException":
        case "com.amazonaws.cognitoidentityprovider#ManagedLoginBrandingExistsException":
            throw await de_ManagedLoginBrandingExistsExceptionRes(parsedOutput);
        case "TermsExistsException":
        case "com.amazonaws.cognitoidentityprovider#TermsExistsException":
            throw await de_TermsExistsExceptionRes(parsedOutput);
        case "FeatureUnavailableInTierException":
        case "com.amazonaws.cognitoidentityprovider#FeatureUnavailableInTierException":
            throw await de_FeatureUnavailableInTierExceptionRes(parsedOutput);
        case "TierChangeNotAllowedException":
        case "com.amazonaws.cognitoidentityprovider#TierChangeNotAllowedException":
            throw await de_TierChangeNotAllowedExceptionRes(parsedOutput);
        case "UserPoolTaggingException":
        case "com.amazonaws.cognitoidentityprovider#UserPoolTaggingException":
            throw await de_UserPoolTaggingExceptionRes(parsedOutput);
        case "InvalidOAuthFlowException":
        case "com.amazonaws.cognitoidentityprovider#InvalidOAuthFlowException":
            throw await de_InvalidOAuthFlowExceptionRes(parsedOutput);
        case "ScopeDoesNotExistException":
        case "com.amazonaws.cognitoidentityprovider#ScopeDoesNotExistException":
            throw await de_ScopeDoesNotExistExceptionRes(parsedOutput);
        case "UnsupportedIdentityProviderException":
        case "com.amazonaws.cognitoidentityprovider#UnsupportedIdentityProviderException":
            throw await de_UnsupportedIdentityProviderExceptionRes(parsedOutput);
        case "RefreshTokenReuseException":
        case "com.amazonaws.cognitoidentityprovider#RefreshTokenReuseException":
            throw await de_RefreshTokenReuseExceptionRes(parsedOutput);
        case "UnauthorizedException":
        case "com.amazonaws.cognitoidentityprovider#UnauthorizedException":
            throw await de_UnauthorizedExceptionRes(parsedOutput);
        case "UnsupportedTokenTypeException":
        case "com.amazonaws.cognitoidentityprovider#UnsupportedTokenTypeException":
            throw await de_UnsupportedTokenTypeExceptionRes(parsedOutput);
        case "WebAuthnConfigurationMissingException":
        case "com.amazonaws.cognitoidentityprovider#WebAuthnConfigurationMissingException":
            throw await de_WebAuthnConfigurationMissingExceptionRes(parsedOutput);
        case "EnableSoftwareTokenMFAException":
        case "com.amazonaws.cognitoidentityprovider#EnableSoftwareTokenMFAException":
            throw await de_EnableSoftwareTokenMFAExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_AliasExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new AliasExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_CodeDeliveryFailureExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new CodeDeliveryFailureException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_CodeMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new CodeMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ConcurrentModificationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ConcurrentModificationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_DeviceKeyExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new DeviceKeyExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_DuplicateProviderExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new DuplicateProviderException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_EnableSoftwareTokenMFAExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new EnableSoftwareTokenMFAException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ExpiredCodeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ExpiredCodeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_FeatureUnavailableInTierExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new FeatureUnavailableInTierException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ForbiddenExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ForbiddenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_GroupExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new GroupExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InternalErrorExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InternalErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidEmailRoleAccessPolicyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidEmailRoleAccessPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidLambdaResponseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidLambdaResponseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidOAuthFlowExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidOAuthFlowException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidParameterExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidParameterException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidPasswordExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidPasswordException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidSmsRoleAccessPolicyExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidSmsRoleAccessPolicyException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidSmsRoleTrustRelationshipExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidSmsRoleTrustRelationshipException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_InvalidUserPoolConfigurationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new InvalidUserPoolConfigurationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_LimitExceededExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new LimitExceededException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ManagedLoginBrandingExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ManagedLoginBrandingExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_MFAMethodNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new MFAMethodNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_NotAuthorizedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new NotAuthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_PasswordHistoryPolicyViolationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new PasswordHistoryPolicyViolationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_PasswordResetRequiredExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new PasswordResetRequiredException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_PreconditionNotMetExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new PreconditionNotMetException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_RefreshTokenReuseExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new RefreshTokenReuseException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ScopeDoesNotExistExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ScopeDoesNotExistException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_SoftwareTokenMFANotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new SoftwareTokenMFANotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TermsExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new TermsExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TierChangeNotAllowedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new TierChangeNotAllowedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TooManyFailedAttemptsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new TooManyFailedAttemptsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UnauthorizedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UnexpectedLambdaExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UnexpectedLambdaException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UnsupportedIdentityProviderExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UnsupportedIdentityProviderException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UnsupportedOperationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UnsupportedOperationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UnsupportedTokenTypeExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UnsupportedTokenTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UnsupportedUserStateExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UnsupportedUserStateException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UserImportInProgressExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UserImportInProgressException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UserLambdaValidationExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UserLambdaValidationException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UsernameExistsExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UsernameExistsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UserNotConfirmedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UserNotConfirmedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UserNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UserNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UserPoolAddOnNotEnabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UserPoolAddOnNotEnabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_UserPoolTaggingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new UserPoolTaggingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_WebAuthnChallengeNotFoundExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new WebAuthnChallengeNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_WebAuthnClientMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new WebAuthnClientMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_WebAuthnConfigurationMissingExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new WebAuthnConfigurationMissingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_WebAuthnCredentialNotSupportedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new WebAuthnCredentialNotSupportedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_WebAuthnNotEnabledExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new WebAuthnNotEnabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_WebAuthnOriginNotAllowedExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new WebAuthnOriginNotAllowedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_WebAuthnRelyingPartyMismatchExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new WebAuthnRelyingPartyMismatchException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const se_AssetListType = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AssetType(entry, context);
    });
};
const se_AssetType = (input, context) => {
    return smithyClient.take(input, {
        Bytes: context.base64Encoder,
        Category: [],
        ColorMode: [],
        Extension: [],
        ResourceId: [],
    });
};
const se_CompleteWebAuthnRegistrationRequest = (input, context) => {
    return smithyClient.take(input, {
        AccessToken: [],
        Credential: (_) => se_Document(_),
    });
};
const se_CreateManagedLoginBrandingRequest = (input, context) => {
    return smithyClient.take(input, {
        Assets: (_) => se_AssetListType(_, context),
        ClientId: [],
        Settings: (_) => se_Document(_),
        UseCognitoProvidedValues: [],
        UserPoolId: [],
    });
};
const se_Document = (input, context) => {
    return input;
};
const se_SetUICustomizationRequest = (input, context) => {
    return smithyClient.take(input, {
        CSS: [],
        ClientId: [],
        ImageFile: context.base64Encoder,
        UserPoolId: [],
    });
};
const se_UpdateManagedLoginBrandingRequest = (input, context) => {
    return smithyClient.take(input, {
        Assets: (_) => se_AssetListType(_, context),
        ManagedLoginBrandingId: [],
        Settings: (_) => se_Document(_),
        UseCognitoProvidedValues: [],
        UserPoolId: [],
    });
};
const de_AdminCreateUserResponse = (output, context) => {
    return smithyClient.take(output, {
        User: (_) => de_UserType(_),
    });
};
const de_AdminGetDeviceResponse = (output, context) => {
    return smithyClient.take(output, {
        Device: (_) => de_DeviceType(_),
    });
};
const de_AdminGetUserResponse = (output, context) => {
    return smithyClient.take(output, {
        Enabled: smithyClient.expectBoolean,
        MFAOptions: smithyClient._json,
        PreferredMfaSetting: smithyClient.expectString,
        UserAttributes: smithyClient._json,
        UserCreateDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        UserLastModifiedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        UserMFASettingList: smithyClient._json,
        UserStatus: smithyClient.expectString,
        Username: smithyClient.expectString,
    });
};
const de_AdminListDevicesResponse = (output, context) => {
    return smithyClient.take(output, {
        Devices: (_) => de_DeviceListType(_),
        PaginationToken: smithyClient.expectString,
    });
};
const de_AdminListGroupsForUserResponse = (output, context) => {
    return smithyClient.take(output, {
        Groups: (_) => de_GroupListType(_),
        NextToken: smithyClient.expectString,
    });
};
const de_AdminListUserAuthEventsResponse = (output, context) => {
    return smithyClient.take(output, {
        AuthEvents: (_) => de_AuthEventsType(_),
        NextToken: smithyClient.expectString,
    });
};
const de_AssetListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssetType(entry, context);
    });
    return retVal;
};
const de_AssetType = (output, context) => {
    return smithyClient.take(output, {
        Bytes: context.base64Decoder,
        Category: smithyClient.expectString,
        ColorMode: smithyClient.expectString,
        Extension: smithyClient.expectString,
        ResourceId: smithyClient.expectString,
    });
};
const de_AuthEventsType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AuthEventType(entry);
    });
    return retVal;
};
const de_AuthEventType = (output, context) => {
    return smithyClient.take(output, {
        ChallengeResponses: smithyClient._json,
        CreationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EventContextData: smithyClient._json,
        EventFeedback: (_) => de_EventFeedbackType(_),
        EventId: smithyClient.expectString,
        EventResponse: smithyClient.expectString,
        EventRisk: smithyClient._json,
        EventType: smithyClient.expectString,
    });
};
const de_CreateGroupResponse = (output, context) => {
    return smithyClient.take(output, {
        Group: (_) => de_GroupType(_),
    });
};
const de_CreateIdentityProviderResponse = (output, context) => {
    return smithyClient.take(output, {
        IdentityProvider: (_) => de_IdentityProviderType(_),
    });
};
const de_CreateManagedLoginBrandingResponse = (output, context) => {
    return smithyClient.take(output, {
        ManagedLoginBranding: (_) => de_ManagedLoginBrandingType(_, context),
    });
};
const de_CreateTermsResponse = (output, context) => {
    return smithyClient.take(output, {
        Terms: (_) => de_TermsType(_),
    });
};
const de_CreateUserImportJobResponse = (output, context) => {
    return smithyClient.take(output, {
        UserImportJob: (_) => de_UserImportJobType(_),
    });
};
const de_CreateUserPoolClientResponse = (output, context) => {
    return smithyClient.take(output, {
        UserPoolClient: (_) => de_UserPoolClientType(_),
    });
};
const de_CreateUserPoolResponse = (output, context) => {
    return smithyClient.take(output, {
        UserPool: (_) => de_UserPoolType(_),
    });
};
const de_DescribeIdentityProviderResponse = (output, context) => {
    return smithyClient.take(output, {
        IdentityProvider: (_) => de_IdentityProviderType(_),
    });
};
const de_DescribeManagedLoginBrandingByClientResponse = (output, context) => {
    return smithyClient.take(output, {
        ManagedLoginBranding: (_) => de_ManagedLoginBrandingType(_, context),
    });
};
const de_DescribeManagedLoginBrandingResponse = (output, context) => {
    return smithyClient.take(output, {
        ManagedLoginBranding: (_) => de_ManagedLoginBrandingType(_, context),
    });
};
const de_DescribeRiskConfigurationResponse = (output, context) => {
    return smithyClient.take(output, {
        RiskConfiguration: (_) => de_RiskConfigurationType(_),
    });
};
const de_DescribeTermsResponse = (output, context) => {
    return smithyClient.take(output, {
        Terms: (_) => de_TermsType(_),
    });
};
const de_DescribeUserImportJobResponse = (output, context) => {
    return smithyClient.take(output, {
        UserImportJob: (_) => de_UserImportJobType(_),
    });
};
const de_DescribeUserPoolClientResponse = (output, context) => {
    return smithyClient.take(output, {
        UserPoolClient: (_) => de_UserPoolClientType(_),
    });
};
const de_DescribeUserPoolResponse = (output, context) => {
    return smithyClient.take(output, {
        UserPool: (_) => de_UserPoolType(_),
    });
};
const de_DeviceListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeviceType(entry);
    });
    return retVal;
};
const de_DeviceType = (output, context) => {
    return smithyClient.take(output, {
        DeviceAttributes: smithyClient._json,
        DeviceCreateDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DeviceKey: smithyClient.expectString,
        DeviceLastAuthenticatedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DeviceLastModifiedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_Document = (output, context) => {
    return output;
};
const de_EventFeedbackType = (output, context) => {
    return smithyClient.take(output, {
        FeedbackDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FeedbackValue: smithyClient.expectString,
        Provider: smithyClient.expectString,
    });
};
const de_GetDeviceResponse = (output, context) => {
    return smithyClient.take(output, {
        Device: (_) => de_DeviceType(_),
    });
};
const de_GetGroupResponse = (output, context) => {
    return smithyClient.take(output, {
        Group: (_) => de_GroupType(_),
    });
};
const de_GetIdentityProviderByIdentifierResponse = (output, context) => {
    return smithyClient.take(output, {
        IdentityProvider: (_) => de_IdentityProviderType(_),
    });
};
const de_GetUICustomizationResponse = (output, context) => {
    return smithyClient.take(output, {
        UICustomization: (_) => de_UICustomizationType(_),
    });
};
const de_GroupListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GroupType(entry);
    });
    return retVal;
};
const de_GroupType = (output, context) => {
    return smithyClient.take(output, {
        CreationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        GroupName: smithyClient.expectString,
        LastModifiedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Precedence: smithyClient.expectInt32,
        RoleArn: smithyClient.expectString,
        UserPoolId: smithyClient.expectString,
    });
};
const de_IdentityProviderType = (output, context) => {
    return smithyClient.take(output, {
        AttributeMapping: smithyClient._json,
        CreationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        IdpIdentifiers: smithyClient._json,
        LastModifiedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ProviderDetails: smithyClient._json,
        ProviderName: smithyClient.expectString,
        ProviderType: smithyClient.expectString,
        UserPoolId: smithyClient.expectString,
    });
};
const de_ListDevicesResponse = (output, context) => {
    return smithyClient.take(output, {
        Devices: (_) => de_DeviceListType(_),
        PaginationToken: smithyClient.expectString,
    });
};
const de_ListGroupsResponse = (output, context) => {
    return smithyClient.take(output, {
        Groups: (_) => de_GroupListType(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListIdentityProvidersResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        Providers: (_) => de_ProvidersListType(_),
    });
};
const de_ListTermsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        Terms: (_) => de_TermsDescriptionListType(_),
    });
};
const de_ListUserImportJobsResponse = (output, context) => {
    return smithyClient.take(output, {
        PaginationToken: smithyClient.expectString,
        UserImportJobs: (_) => de_UserImportJobsListType(_),
    });
};
const de_ListUserPoolsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        UserPools: (_) => de_UserPoolListType(_),
    });
};
const de_ListUsersInGroupResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        Users: (_) => de_UsersListType(_),
    });
};
const de_ListUsersResponse = (output, context) => {
    return smithyClient.take(output, {
        PaginationToken: smithyClient.expectString,
        Users: (_) => de_UsersListType(_),
    });
};
const de_ListWebAuthnCredentialsResponse = (output, context) => {
    return smithyClient.take(output, {
        Credentials: (_) => de_WebAuthnCredentialDescriptionListType(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ManagedLoginBrandingType = (output, context) => {
    return smithyClient.take(output, {
        Assets: (_) => de_AssetListType(_, context),
        CreationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ManagedLoginBrandingId: smithyClient.expectString,
        Settings: (_) => de_Document(_),
        UseCognitoProvidedValues: smithyClient.expectBoolean,
        UserPoolId: smithyClient.expectString,
    });
};
const de_ProviderDescription = (output, context) => {
    return smithyClient.take(output, {
        CreationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ProviderName: smithyClient.expectString,
        ProviderType: smithyClient.expectString,
    });
};
const de_ProvidersListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProviderDescription(entry);
    });
    return retVal;
};
const de_RiskConfigurationType = (output, context) => {
    return smithyClient.take(output, {
        AccountTakeoverRiskConfiguration: smithyClient._json,
        ClientId: smithyClient.expectString,
        CompromisedCredentialsRiskConfiguration: smithyClient._json,
        LastModifiedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        RiskExceptionConfiguration: smithyClient._json,
        UserPoolId: smithyClient.expectString,
    });
};
const de_SetRiskConfigurationResponse = (output, context) => {
    return smithyClient.take(output, {
        RiskConfiguration: (_) => de_RiskConfigurationType(_),
    });
};
const de_SetUICustomizationResponse = (output, context) => {
    return smithyClient.take(output, {
        UICustomization: (_) => de_UICustomizationType(_),
    });
};
const de_StartUserImportJobResponse = (output, context) => {
    return smithyClient.take(output, {
        UserImportJob: (_) => de_UserImportJobType(_),
    });
};
const de_StartWebAuthnRegistrationResponse = (output, context) => {
    return smithyClient.take(output, {
        CredentialCreationOptions: (_) => de_Document(_),
    });
};
const de_StopUserImportJobResponse = (output, context) => {
    return smithyClient.take(output, {
        UserImportJob: (_) => de_UserImportJobType(_),
    });
};
const de_TermsDescriptionListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TermsDescriptionType(entry);
    });
    return retVal;
};
const de_TermsDescriptionType = (output, context) => {
    return smithyClient.take(output, {
        CreationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Enforcement: smithyClient.expectString,
        LastModifiedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        TermsId: smithyClient.expectString,
        TermsName: smithyClient.expectString,
    });
};
const de_TermsType = (output, context) => {
    return smithyClient.take(output, {
        ClientId: smithyClient.expectString,
        CreationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Enforcement: smithyClient.expectString,
        LastModifiedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Links: smithyClient._json,
        TermsId: smithyClient.expectString,
        TermsName: smithyClient.expectString,
        TermsSource: smithyClient.expectString,
        UserPoolId: smithyClient.expectString,
    });
};
const de_UICustomizationType = (output, context) => {
    return smithyClient.take(output, {
        CSS: smithyClient.expectString,
        CSSVersion: smithyClient.expectString,
        ClientId: smithyClient.expectString,
        CreationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ImageUrl: smithyClient.expectString,
        LastModifiedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        UserPoolId: smithyClient.expectString,
    });
};
const de_UpdateGroupResponse = (output, context) => {
    return smithyClient.take(output, {
        Group: (_) => de_GroupType(_),
    });
};
const de_UpdateIdentityProviderResponse = (output, context) => {
    return smithyClient.take(output, {
        IdentityProvider: (_) => de_IdentityProviderType(_),
    });
};
const de_UpdateManagedLoginBrandingResponse = (output, context) => {
    return smithyClient.take(output, {
        ManagedLoginBranding: (_) => de_ManagedLoginBrandingType(_, context),
    });
};
const de_UpdateTermsResponse = (output, context) => {
    return smithyClient.take(output, {
        Terms: (_) => de_TermsType(_),
    });
};
const de_UpdateUserPoolClientResponse = (output, context) => {
    return smithyClient.take(output, {
        UserPoolClient: (_) => de_UserPoolClientType(_),
    });
};
const de_UserImportJobsListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserImportJobType(entry);
    });
    return retVal;
};
const de_UserImportJobType = (output, context) => {
    return smithyClient.take(output, {
        CloudWatchLogsRoleArn: smithyClient.expectString,
        CompletionDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        CompletionMessage: smithyClient.expectString,
        CreationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailedUsers: smithyClient.expectLong,
        ImportedUsers: smithyClient.expectLong,
        JobId: smithyClient.expectString,
        JobName: smithyClient.expectString,
        PreSignedUrl: smithyClient.expectString,
        SkippedUsers: smithyClient.expectLong,
        StartDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Status: smithyClient.expectString,
        UserPoolId: smithyClient.expectString,
    });
};
const de_UserPoolClientType = (output, context) => {
    return smithyClient.take(output, {
        AccessTokenValidity: smithyClient.expectInt32,
        AllowedOAuthFlows: smithyClient._json,
        AllowedOAuthFlowsUserPoolClient: smithyClient.expectBoolean,
        AllowedOAuthScopes: smithyClient._json,
        AnalyticsConfiguration: smithyClient._json,
        AuthSessionValidity: smithyClient.expectInt32,
        CallbackURLs: smithyClient._json,
        ClientId: smithyClient.expectString,
        ClientName: smithyClient.expectString,
        ClientSecret: smithyClient.expectString,
        CreationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DefaultRedirectURI: smithyClient.expectString,
        EnablePropagateAdditionalUserContextData: smithyClient.expectBoolean,
        EnableTokenRevocation: smithyClient.expectBoolean,
        ExplicitAuthFlows: smithyClient._json,
        IdTokenValidity: smithyClient.expectInt32,
        LastModifiedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LogoutURLs: smithyClient._json,
        PreventUserExistenceErrors: smithyClient.expectString,
        ReadAttributes: smithyClient._json,
        RefreshTokenRotation: smithyClient._json,
        RefreshTokenValidity: smithyClient.expectInt32,
        SupportedIdentityProviders: smithyClient._json,
        TokenValidityUnits: smithyClient._json,
        UserPoolId: smithyClient.expectString,
        WriteAttributes: smithyClient._json,
    });
};
const de_UserPoolDescriptionType = (output, context) => {
    return smithyClient.take(output, {
        CreationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Id: smithyClient.expectString,
        LambdaConfig: smithyClient._json,
        LastModifiedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Name: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const de_UserPoolListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserPoolDescriptionType(entry);
    });
    return retVal;
};
const de_UserPoolType = (output, context) => {
    return smithyClient.take(output, {
        AccountRecoverySetting: smithyClient._json,
        AdminCreateUserConfig: smithyClient._json,
        AliasAttributes: smithyClient._json,
        Arn: smithyClient.expectString,
        AutoVerifiedAttributes: smithyClient._json,
        CreationDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        CustomDomain: smithyClient.expectString,
        DeletionProtection: smithyClient.expectString,
        DeviceConfiguration: smithyClient._json,
        Domain: smithyClient.expectString,
        EmailConfiguration: smithyClient._json,
        EmailConfigurationFailure: smithyClient.expectString,
        EmailVerificationMessage: smithyClient.expectString,
        EmailVerificationSubject: smithyClient.expectString,
        EstimatedNumberOfUsers: smithyClient.expectInt32,
        Id: smithyClient.expectString,
        LambdaConfig: smithyClient._json,
        LastModifiedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        MfaConfiguration: smithyClient.expectString,
        Name: smithyClient.expectString,
        Policies: smithyClient._json,
        SchemaAttributes: smithyClient._json,
        SmsAuthenticationMessage: smithyClient.expectString,
        SmsConfiguration: smithyClient._json,
        SmsConfigurationFailure: smithyClient.expectString,
        SmsVerificationMessage: smithyClient.expectString,
        Status: smithyClient.expectString,
        UserAttributeUpdateSettings: smithyClient._json,
        UserPoolAddOns: smithyClient._json,
        UserPoolTags: smithyClient._json,
        UserPoolTier: smithyClient.expectString,
        UsernameAttributes: smithyClient._json,
        UsernameConfiguration: smithyClient._json,
        VerificationMessageTemplate: smithyClient._json,
    });
};
const de_UsersListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserType(entry);
    });
    return retVal;
};
const de_UserType = (output, context) => {
    return smithyClient.take(output, {
        Attributes: smithyClient._json,
        Enabled: smithyClient.expectBoolean,
        MFAOptions: smithyClient._json,
        UserCreateDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        UserLastModifiedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        UserStatus: smithyClient.expectString,
        Username: smithyClient.expectString,
    });
};
const de_WebAuthnCredentialDescription = (output, context) => {
    return smithyClient.take(output, {
        AuthenticatorAttachment: smithyClient.expectString,
        AuthenticatorTransports: smithyClient._json,
        CreatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        CredentialId: smithyClient.expectString,
        FriendlyCredentialName: smithyClient.expectString,
        RelyingPartyId: smithyClient.expectString,
    });
};
const de_WebAuthnCredentialDescriptionListType = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WebAuthnCredentialDescription(entry);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const throwDefaultError = smithyClient.withBaseException(CognitoIdentityProviderServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocolHttp.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `AWSCognitoIdentityProviderService.${operation}`,
    };
}

class AddCustomAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AddCustomAttributes", {})
    .n("CognitoIdentityProviderClient", "AddCustomAttributesCommand")
    .f(void 0, void 0)
    .ser(se_AddCustomAttributesCommand)
    .de(de_AddCustomAttributesCommand)
    .build() {
}

class AdminAddUserToGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminAddUserToGroup", {})
    .n("CognitoIdentityProviderClient", "AdminAddUserToGroupCommand")
    .f(AdminAddUserToGroupRequestFilterSensitiveLog, void 0)
    .ser(se_AdminAddUserToGroupCommand)
    .de(de_AdminAddUserToGroupCommand)
    .build() {
}

class AdminConfirmSignUpCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminConfirmSignUp", {})
    .n("CognitoIdentityProviderClient", "AdminConfirmSignUpCommand")
    .f(AdminConfirmSignUpRequestFilterSensitiveLog, void 0)
    .ser(se_AdminConfirmSignUpCommand)
    .de(de_AdminConfirmSignUpCommand)
    .build() {
}

class AdminCreateUserCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminCreateUser", {})
    .n("CognitoIdentityProviderClient", "AdminCreateUserCommand")
    .f(AdminCreateUserRequestFilterSensitiveLog, AdminCreateUserResponseFilterSensitiveLog)
    .ser(se_AdminCreateUserCommand)
    .de(de_AdminCreateUserCommand)
    .build() {
}

class AdminDeleteUserAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminDeleteUserAttributes", {})
    .n("CognitoIdentityProviderClient", "AdminDeleteUserAttributesCommand")
    .f(AdminDeleteUserAttributesRequestFilterSensitiveLog, void 0)
    .ser(se_AdminDeleteUserAttributesCommand)
    .de(de_AdminDeleteUserAttributesCommand)
    .build() {
}

class AdminDeleteUserCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminDeleteUser", {})
    .n("CognitoIdentityProviderClient", "AdminDeleteUserCommand")
    .f(AdminDeleteUserRequestFilterSensitiveLog, void 0)
    .ser(se_AdminDeleteUserCommand)
    .de(de_AdminDeleteUserCommand)
    .build() {
}

class AdminDisableProviderForUserCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminDisableProviderForUser", {})
    .n("CognitoIdentityProviderClient", "AdminDisableProviderForUserCommand")
    .f(void 0, void 0)
    .ser(se_AdminDisableProviderForUserCommand)
    .de(de_AdminDisableProviderForUserCommand)
    .build() {
}

class AdminDisableUserCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminDisableUser", {})
    .n("CognitoIdentityProviderClient", "AdminDisableUserCommand")
    .f(AdminDisableUserRequestFilterSensitiveLog, void 0)
    .ser(se_AdminDisableUserCommand)
    .de(de_AdminDisableUserCommand)
    .build() {
}

class AdminEnableUserCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminEnableUser", {})
    .n("CognitoIdentityProviderClient", "AdminEnableUserCommand")
    .f(AdminEnableUserRequestFilterSensitiveLog, void 0)
    .ser(se_AdminEnableUserCommand)
    .de(de_AdminEnableUserCommand)
    .build() {
}

class AdminForgetDeviceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminForgetDevice", {})
    .n("CognitoIdentityProviderClient", "AdminForgetDeviceCommand")
    .f(AdminForgetDeviceRequestFilterSensitiveLog, void 0)
    .ser(se_AdminForgetDeviceCommand)
    .de(de_AdminForgetDeviceCommand)
    .build() {
}

class AdminGetDeviceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminGetDevice", {})
    .n("CognitoIdentityProviderClient", "AdminGetDeviceCommand")
    .f(AdminGetDeviceRequestFilterSensitiveLog, AdminGetDeviceResponseFilterSensitiveLog)
    .ser(se_AdminGetDeviceCommand)
    .de(de_AdminGetDeviceCommand)
    .build() {
}

class AdminGetUserCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminGetUser", {})
    .n("CognitoIdentityProviderClient", "AdminGetUserCommand")
    .f(AdminGetUserRequestFilterSensitiveLog, AdminGetUserResponseFilterSensitiveLog)
    .ser(se_AdminGetUserCommand)
    .de(de_AdminGetUserCommand)
    .build() {
}

class AdminInitiateAuthCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminInitiateAuth", {})
    .n("CognitoIdentityProviderClient", "AdminInitiateAuthCommand")
    .f(AdminInitiateAuthRequestFilterSensitiveLog, AdminInitiateAuthResponseFilterSensitiveLog)
    .ser(se_AdminInitiateAuthCommand)
    .de(de_AdminInitiateAuthCommand)
    .build() {
}

class AdminLinkProviderForUserCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminLinkProviderForUser", {})
    .n("CognitoIdentityProviderClient", "AdminLinkProviderForUserCommand")
    .f(void 0, void 0)
    .ser(se_AdminLinkProviderForUserCommand)
    .de(de_AdminLinkProviderForUserCommand)
    .build() {
}

class AdminListDevicesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminListDevices", {})
    .n("CognitoIdentityProviderClient", "AdminListDevicesCommand")
    .f(AdminListDevicesRequestFilterSensitiveLog, AdminListDevicesResponseFilterSensitiveLog)
    .ser(se_AdminListDevicesCommand)
    .de(de_AdminListDevicesCommand)
    .build() {
}

class AdminListGroupsForUserCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminListGroupsForUser", {})
    .n("CognitoIdentityProviderClient", "AdminListGroupsForUserCommand")
    .f(AdminListGroupsForUserRequestFilterSensitiveLog, void 0)
    .ser(se_AdminListGroupsForUserCommand)
    .de(de_AdminListGroupsForUserCommand)
    .build() {
}

class AdminListUserAuthEventsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminListUserAuthEvents", {})
    .n("CognitoIdentityProviderClient", "AdminListUserAuthEventsCommand")
    .f(AdminListUserAuthEventsRequestFilterSensitiveLog, void 0)
    .ser(se_AdminListUserAuthEventsCommand)
    .de(de_AdminListUserAuthEventsCommand)
    .build() {
}

class AdminRemoveUserFromGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminRemoveUserFromGroup", {})
    .n("CognitoIdentityProviderClient", "AdminRemoveUserFromGroupCommand")
    .f(AdminRemoveUserFromGroupRequestFilterSensitiveLog, void 0)
    .ser(se_AdminRemoveUserFromGroupCommand)
    .de(de_AdminRemoveUserFromGroupCommand)
    .build() {
}

class AdminResetUserPasswordCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminResetUserPassword", {})
    .n("CognitoIdentityProviderClient", "AdminResetUserPasswordCommand")
    .f(AdminResetUserPasswordRequestFilterSensitiveLog, void 0)
    .ser(se_AdminResetUserPasswordCommand)
    .de(de_AdminResetUserPasswordCommand)
    .build() {
}

class AdminRespondToAuthChallengeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminRespondToAuthChallenge", {})
    .n("CognitoIdentityProviderClient", "AdminRespondToAuthChallengeCommand")
    .f(AdminRespondToAuthChallengeRequestFilterSensitiveLog, AdminRespondToAuthChallengeResponseFilterSensitiveLog)
    .ser(se_AdminRespondToAuthChallengeCommand)
    .de(de_AdminRespondToAuthChallengeCommand)
    .build() {
}

class AdminSetUserMFAPreferenceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminSetUserMFAPreference", {})
    .n("CognitoIdentityProviderClient", "AdminSetUserMFAPreferenceCommand")
    .f(AdminSetUserMFAPreferenceRequestFilterSensitiveLog, void 0)
    .ser(se_AdminSetUserMFAPreferenceCommand)
    .de(de_AdminSetUserMFAPreferenceCommand)
    .build() {
}

class AdminSetUserPasswordCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminSetUserPassword", {})
    .n("CognitoIdentityProviderClient", "AdminSetUserPasswordCommand")
    .f(AdminSetUserPasswordRequestFilterSensitiveLog, void 0)
    .ser(se_AdminSetUserPasswordCommand)
    .de(de_AdminSetUserPasswordCommand)
    .build() {
}

class AdminSetUserSettingsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminSetUserSettings", {})
    .n("CognitoIdentityProviderClient", "AdminSetUserSettingsCommand")
    .f(AdminSetUserSettingsRequestFilterSensitiveLog, void 0)
    .ser(se_AdminSetUserSettingsCommand)
    .de(de_AdminSetUserSettingsCommand)
    .build() {
}

class AdminUpdateAuthEventFeedbackCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminUpdateAuthEventFeedback", {})
    .n("CognitoIdentityProviderClient", "AdminUpdateAuthEventFeedbackCommand")
    .f(AdminUpdateAuthEventFeedbackRequestFilterSensitiveLog, void 0)
    .ser(se_AdminUpdateAuthEventFeedbackCommand)
    .de(de_AdminUpdateAuthEventFeedbackCommand)
    .build() {
}

class AdminUpdateDeviceStatusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminUpdateDeviceStatus", {})
    .n("CognitoIdentityProviderClient", "AdminUpdateDeviceStatusCommand")
    .f(AdminUpdateDeviceStatusRequestFilterSensitiveLog, void 0)
    .ser(se_AdminUpdateDeviceStatusCommand)
    .de(de_AdminUpdateDeviceStatusCommand)
    .build() {
}

class AdminUpdateUserAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminUpdateUserAttributes", {})
    .n("CognitoIdentityProviderClient", "AdminUpdateUserAttributesCommand")
    .f(AdminUpdateUserAttributesRequestFilterSensitiveLog, void 0)
    .ser(se_AdminUpdateUserAttributesCommand)
    .de(de_AdminUpdateUserAttributesCommand)
    .build() {
}

class AdminUserGlobalSignOutCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AdminUserGlobalSignOut", {})
    .n("CognitoIdentityProviderClient", "AdminUserGlobalSignOutCommand")
    .f(AdminUserGlobalSignOutRequestFilterSensitiveLog, void 0)
    .ser(se_AdminUserGlobalSignOutCommand)
    .de(de_AdminUserGlobalSignOutCommand)
    .build() {
}

class AssociateSoftwareTokenCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "AssociateSoftwareToken", {})
    .n("CognitoIdentityProviderClient", "AssociateSoftwareTokenCommand")
    .f(AssociateSoftwareTokenRequestFilterSensitiveLog, AssociateSoftwareTokenResponseFilterSensitiveLog)
    .ser(se_AssociateSoftwareTokenCommand)
    .de(de_AssociateSoftwareTokenCommand)
    .build() {
}

class ChangePasswordCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ChangePassword", {})
    .n("CognitoIdentityProviderClient", "ChangePasswordCommand")
    .f(ChangePasswordRequestFilterSensitiveLog, void 0)
    .ser(se_ChangePasswordCommand)
    .de(de_ChangePasswordCommand)
    .build() {
}

class CompleteWebAuthnRegistrationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "CompleteWebAuthnRegistration", {})
    .n("CognitoIdentityProviderClient", "CompleteWebAuthnRegistrationCommand")
    .f(CompleteWebAuthnRegistrationRequestFilterSensitiveLog, void 0)
    .ser(se_CompleteWebAuthnRegistrationCommand)
    .de(de_CompleteWebAuthnRegistrationCommand)
    .build() {
}

class ConfirmDeviceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ConfirmDevice", {})
    .n("CognitoIdentityProviderClient", "ConfirmDeviceCommand")
    .f(ConfirmDeviceRequestFilterSensitiveLog, void 0)
    .ser(se_ConfirmDeviceCommand)
    .de(de_ConfirmDeviceCommand)
    .build() {
}

class ConfirmForgotPasswordCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ConfirmForgotPassword", {})
    .n("CognitoIdentityProviderClient", "ConfirmForgotPasswordCommand")
    .f(ConfirmForgotPasswordRequestFilterSensitiveLog, void 0)
    .ser(se_ConfirmForgotPasswordCommand)
    .de(de_ConfirmForgotPasswordCommand)
    .build() {
}

class ConfirmSignUpCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ConfirmSignUp", {})
    .n("CognitoIdentityProviderClient", "ConfirmSignUpCommand")
    .f(ConfirmSignUpRequestFilterSensitiveLog, ConfirmSignUpResponseFilterSensitiveLog)
    .ser(se_ConfirmSignUpCommand)
    .de(de_ConfirmSignUpCommand)
    .build() {
}

class CreateGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "CreateGroup", {})
    .n("CognitoIdentityProviderClient", "CreateGroupCommand")
    .f(void 0, void 0)
    .ser(se_CreateGroupCommand)
    .de(de_CreateGroupCommand)
    .build() {
}

class CreateIdentityProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "CreateIdentityProvider", {})
    .n("CognitoIdentityProviderClient", "CreateIdentityProviderCommand")
    .f(void 0, void 0)
    .ser(se_CreateIdentityProviderCommand)
    .de(de_CreateIdentityProviderCommand)
    .build() {
}

class CreateManagedLoginBrandingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "CreateManagedLoginBranding", {})
    .n("CognitoIdentityProviderClient", "CreateManagedLoginBrandingCommand")
    .f(CreateManagedLoginBrandingRequestFilterSensitiveLog, void 0)
    .ser(se_CreateManagedLoginBrandingCommand)
    .de(de_CreateManagedLoginBrandingCommand)
    .build() {
}

class CreateResourceServerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "CreateResourceServer", {})
    .n("CognitoIdentityProviderClient", "CreateResourceServerCommand")
    .f(void 0, void 0)
    .ser(se_CreateResourceServerCommand)
    .de(de_CreateResourceServerCommand)
    .build() {
}

class CreateTermsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "CreateTerms", {})
    .n("CognitoIdentityProviderClient", "CreateTermsCommand")
    .f(CreateTermsRequestFilterSensitiveLog, CreateTermsResponseFilterSensitiveLog)
    .ser(se_CreateTermsCommand)
    .de(de_CreateTermsCommand)
    .build() {
}

class CreateUserImportJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "CreateUserImportJob", {})
    .n("CognitoIdentityProviderClient", "CreateUserImportJobCommand")
    .f(void 0, void 0)
    .ser(se_CreateUserImportJobCommand)
    .de(de_CreateUserImportJobCommand)
    .build() {
}

class CreateUserPoolClientCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "CreateUserPoolClient", {})
    .n("CognitoIdentityProviderClient", "CreateUserPoolClientCommand")
    .f(void 0, CreateUserPoolClientResponseFilterSensitiveLog)
    .ser(se_CreateUserPoolClientCommand)
    .de(de_CreateUserPoolClientCommand)
    .build() {
}

class CreateUserPoolCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "CreateUserPool", {})
    .n("CognitoIdentityProviderClient", "CreateUserPoolCommand")
    .f(void 0, void 0)
    .ser(se_CreateUserPoolCommand)
    .de(de_CreateUserPoolCommand)
    .build() {
}

class CreateUserPoolDomainCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "CreateUserPoolDomain", {})
    .n("CognitoIdentityProviderClient", "CreateUserPoolDomainCommand")
    .f(void 0, void 0)
    .ser(se_CreateUserPoolDomainCommand)
    .de(de_CreateUserPoolDomainCommand)
    .build() {
}

class DeleteGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DeleteGroup", {})
    .n("CognitoIdentityProviderClient", "DeleteGroupCommand")
    .f(void 0, void 0)
    .ser(se_DeleteGroupCommand)
    .de(de_DeleteGroupCommand)
    .build() {
}

class DeleteIdentityProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DeleteIdentityProvider", {})
    .n("CognitoIdentityProviderClient", "DeleteIdentityProviderCommand")
    .f(void 0, void 0)
    .ser(se_DeleteIdentityProviderCommand)
    .de(de_DeleteIdentityProviderCommand)
    .build() {
}

class DeleteManagedLoginBrandingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DeleteManagedLoginBranding", {})
    .n("CognitoIdentityProviderClient", "DeleteManagedLoginBrandingCommand")
    .f(void 0, void 0)
    .ser(se_DeleteManagedLoginBrandingCommand)
    .de(de_DeleteManagedLoginBrandingCommand)
    .build() {
}

class DeleteResourceServerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DeleteResourceServer", {})
    .n("CognitoIdentityProviderClient", "DeleteResourceServerCommand")
    .f(void 0, void 0)
    .ser(se_DeleteResourceServerCommand)
    .de(de_DeleteResourceServerCommand)
    .build() {
}

class DeleteTermsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DeleteTerms", {})
    .n("CognitoIdentityProviderClient", "DeleteTermsCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTermsCommand)
    .de(de_DeleteTermsCommand)
    .build() {
}

class DeleteUserAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DeleteUserAttributes", {})
    .n("CognitoIdentityProviderClient", "DeleteUserAttributesCommand")
    .f(DeleteUserAttributesRequestFilterSensitiveLog, void 0)
    .ser(se_DeleteUserAttributesCommand)
    .de(de_DeleteUserAttributesCommand)
    .build() {
}

class DeleteUserCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DeleteUser", {})
    .n("CognitoIdentityProviderClient", "DeleteUserCommand")
    .f(DeleteUserRequestFilterSensitiveLog, void 0)
    .ser(se_DeleteUserCommand)
    .de(de_DeleteUserCommand)
    .build() {
}

class DeleteUserPoolClientCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DeleteUserPoolClient", {})
    .n("CognitoIdentityProviderClient", "DeleteUserPoolClientCommand")
    .f(DeleteUserPoolClientRequestFilterSensitiveLog, void 0)
    .ser(se_DeleteUserPoolClientCommand)
    .de(de_DeleteUserPoolClientCommand)
    .build() {
}

class DeleteUserPoolCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DeleteUserPool", {})
    .n("CognitoIdentityProviderClient", "DeleteUserPoolCommand")
    .f(void 0, void 0)
    .ser(se_DeleteUserPoolCommand)
    .de(de_DeleteUserPoolCommand)
    .build() {
}

class DeleteUserPoolDomainCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DeleteUserPoolDomain", {})
    .n("CognitoIdentityProviderClient", "DeleteUserPoolDomainCommand")
    .f(void 0, void 0)
    .ser(se_DeleteUserPoolDomainCommand)
    .de(de_DeleteUserPoolDomainCommand)
    .build() {
}

class DeleteWebAuthnCredentialCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DeleteWebAuthnCredential", {})
    .n("CognitoIdentityProviderClient", "DeleteWebAuthnCredentialCommand")
    .f(DeleteWebAuthnCredentialRequestFilterSensitiveLog, void 0)
    .ser(se_DeleteWebAuthnCredentialCommand)
    .de(de_DeleteWebAuthnCredentialCommand)
    .build() {
}

class DescribeIdentityProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DescribeIdentityProvider", {})
    .n("CognitoIdentityProviderClient", "DescribeIdentityProviderCommand")
    .f(void 0, void 0)
    .ser(se_DescribeIdentityProviderCommand)
    .de(de_DescribeIdentityProviderCommand)
    .build() {
}

class DescribeManagedLoginBrandingByClientCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DescribeManagedLoginBrandingByClient", {})
    .n("CognitoIdentityProviderClient", "DescribeManagedLoginBrandingByClientCommand")
    .f(DescribeManagedLoginBrandingByClientRequestFilterSensitiveLog, void 0)
    .ser(se_DescribeManagedLoginBrandingByClientCommand)
    .de(de_DescribeManagedLoginBrandingByClientCommand)
    .build() {
}

class DescribeManagedLoginBrandingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DescribeManagedLoginBranding", {})
    .n("CognitoIdentityProviderClient", "DescribeManagedLoginBrandingCommand")
    .f(void 0, void 0)
    .ser(se_DescribeManagedLoginBrandingCommand)
    .de(de_DescribeManagedLoginBrandingCommand)
    .build() {
}

class DescribeResourceServerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DescribeResourceServer", {})
    .n("CognitoIdentityProviderClient", "DescribeResourceServerCommand")
    .f(void 0, void 0)
    .ser(se_DescribeResourceServerCommand)
    .de(de_DescribeResourceServerCommand)
    .build() {
}

class DescribeRiskConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DescribeRiskConfiguration", {})
    .n("CognitoIdentityProviderClient", "DescribeRiskConfigurationCommand")
    .f(DescribeRiskConfigurationRequestFilterSensitiveLog, DescribeRiskConfigurationResponseFilterSensitiveLog)
    .ser(se_DescribeRiskConfigurationCommand)
    .de(de_DescribeRiskConfigurationCommand)
    .build() {
}

class DescribeTermsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DescribeTerms", {})
    .n("CognitoIdentityProviderClient", "DescribeTermsCommand")
    .f(void 0, DescribeTermsResponseFilterSensitiveLog)
    .ser(se_DescribeTermsCommand)
    .de(de_DescribeTermsCommand)
    .build() {
}

class DescribeUserImportJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DescribeUserImportJob", {})
    .n("CognitoIdentityProviderClient", "DescribeUserImportJobCommand")
    .f(void 0, void 0)
    .ser(se_DescribeUserImportJobCommand)
    .de(de_DescribeUserImportJobCommand)
    .build() {
}

class DescribeUserPoolClientCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DescribeUserPoolClient", {})
    .n("CognitoIdentityProviderClient", "DescribeUserPoolClientCommand")
    .f(DescribeUserPoolClientRequestFilterSensitiveLog, DescribeUserPoolClientResponseFilterSensitiveLog)
    .ser(se_DescribeUserPoolClientCommand)
    .de(de_DescribeUserPoolClientCommand)
    .build() {
}

class DescribeUserPoolCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DescribeUserPool", {})
    .n("CognitoIdentityProviderClient", "DescribeUserPoolCommand")
    .f(void 0, void 0)
    .ser(se_DescribeUserPoolCommand)
    .de(de_DescribeUserPoolCommand)
    .build() {
}

class DescribeUserPoolDomainCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "DescribeUserPoolDomain", {})
    .n("CognitoIdentityProviderClient", "DescribeUserPoolDomainCommand")
    .f(void 0, void 0)
    .ser(se_DescribeUserPoolDomainCommand)
    .de(de_DescribeUserPoolDomainCommand)
    .build() {
}

class ForgetDeviceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ForgetDevice", {})
    .n("CognitoIdentityProviderClient", "ForgetDeviceCommand")
    .f(ForgetDeviceRequestFilterSensitiveLog, void 0)
    .ser(se_ForgetDeviceCommand)
    .de(de_ForgetDeviceCommand)
    .build() {
}

class ForgotPasswordCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ForgotPassword", {})
    .n("CognitoIdentityProviderClient", "ForgotPasswordCommand")
    .f(ForgotPasswordRequestFilterSensitiveLog, void 0)
    .ser(se_ForgotPasswordCommand)
    .de(de_ForgotPasswordCommand)
    .build() {
}

class GetCSVHeaderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetCSVHeader", {})
    .n("CognitoIdentityProviderClient", "GetCSVHeaderCommand")
    .f(void 0, void 0)
    .ser(se_GetCSVHeaderCommand)
    .de(de_GetCSVHeaderCommand)
    .build() {
}

class GetDeviceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetDevice", {})
    .n("CognitoIdentityProviderClient", "GetDeviceCommand")
    .f(GetDeviceRequestFilterSensitiveLog, GetDeviceResponseFilterSensitiveLog)
    .ser(se_GetDeviceCommand)
    .de(de_GetDeviceCommand)
    .build() {
}

class GetGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetGroup", {})
    .n("CognitoIdentityProviderClient", "GetGroupCommand")
    .f(void 0, void 0)
    .ser(se_GetGroupCommand)
    .de(de_GetGroupCommand)
    .build() {
}

class GetIdentityProviderByIdentifierCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetIdentityProviderByIdentifier", {})
    .n("CognitoIdentityProviderClient", "GetIdentityProviderByIdentifierCommand")
    .f(void 0, void 0)
    .ser(se_GetIdentityProviderByIdentifierCommand)
    .de(de_GetIdentityProviderByIdentifierCommand)
    .build() {
}

class GetLogDeliveryConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetLogDeliveryConfiguration", {})
    .n("CognitoIdentityProviderClient", "GetLogDeliveryConfigurationCommand")
    .f(void 0, void 0)
    .ser(se_GetLogDeliveryConfigurationCommand)
    .de(de_GetLogDeliveryConfigurationCommand)
    .build() {
}

class GetSigningCertificateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetSigningCertificate", {})
    .n("CognitoIdentityProviderClient", "GetSigningCertificateCommand")
    .f(void 0, void 0)
    .ser(se_GetSigningCertificateCommand)
    .de(de_GetSigningCertificateCommand)
    .build() {
}

class GetTokensFromRefreshTokenCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetTokensFromRefreshToken", {})
    .n("CognitoIdentityProviderClient", "GetTokensFromRefreshTokenCommand")
    .f(GetTokensFromRefreshTokenRequestFilterSensitiveLog, GetTokensFromRefreshTokenResponseFilterSensitiveLog)
    .ser(se_GetTokensFromRefreshTokenCommand)
    .de(de_GetTokensFromRefreshTokenCommand)
    .build() {
}

class GetUICustomizationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetUICustomization", {})
    .n("CognitoIdentityProviderClient", "GetUICustomizationCommand")
    .f(GetUICustomizationRequestFilterSensitiveLog, GetUICustomizationResponseFilterSensitiveLog)
    .ser(se_GetUICustomizationCommand)
    .de(de_GetUICustomizationCommand)
    .build() {
}

class GetUserAttributeVerificationCodeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetUserAttributeVerificationCode", {})
    .n("CognitoIdentityProviderClient", "GetUserAttributeVerificationCodeCommand")
    .f(GetUserAttributeVerificationCodeRequestFilterSensitiveLog, void 0)
    .ser(se_GetUserAttributeVerificationCodeCommand)
    .de(de_GetUserAttributeVerificationCodeCommand)
    .build() {
}

class GetUserAuthFactorsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetUserAuthFactors", {})
    .n("CognitoIdentityProviderClient", "GetUserAuthFactorsCommand")
    .f(GetUserAuthFactorsRequestFilterSensitiveLog, GetUserAuthFactorsResponseFilterSensitiveLog)
    .ser(se_GetUserAuthFactorsCommand)
    .de(de_GetUserAuthFactorsCommand)
    .build() {
}

class GetUserCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetUser", {})
    .n("CognitoIdentityProviderClient", "GetUserCommand")
    .f(GetUserRequestFilterSensitiveLog, GetUserResponseFilterSensitiveLog)
    .ser(se_GetUserCommand)
    .de(de_GetUserCommand)
    .build() {
}

class GetUserPoolMfaConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GetUserPoolMfaConfig", {})
    .n("CognitoIdentityProviderClient", "GetUserPoolMfaConfigCommand")
    .f(void 0, void 0)
    .ser(se_GetUserPoolMfaConfigCommand)
    .de(de_GetUserPoolMfaConfigCommand)
    .build() {
}

class GlobalSignOutCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "GlobalSignOut", {})
    .n("CognitoIdentityProviderClient", "GlobalSignOutCommand")
    .f(GlobalSignOutRequestFilterSensitiveLog, void 0)
    .ser(se_GlobalSignOutCommand)
    .de(de_GlobalSignOutCommand)
    .build() {
}

class InitiateAuthCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "InitiateAuth", {})
    .n("CognitoIdentityProviderClient", "InitiateAuthCommand")
    .f(InitiateAuthRequestFilterSensitiveLog, InitiateAuthResponseFilterSensitiveLog)
    .ser(se_InitiateAuthCommand)
    .de(de_InitiateAuthCommand)
    .build() {
}

class ListDevicesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListDevices", {})
    .n("CognitoIdentityProviderClient", "ListDevicesCommand")
    .f(ListDevicesRequestFilterSensitiveLog, ListDevicesResponseFilterSensitiveLog)
    .ser(se_ListDevicesCommand)
    .de(de_ListDevicesCommand)
    .build() {
}

class ListGroupsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListGroups", {})
    .n("CognitoIdentityProviderClient", "ListGroupsCommand")
    .f(void 0, void 0)
    .ser(se_ListGroupsCommand)
    .de(de_ListGroupsCommand)
    .build() {
}

class ListIdentityProvidersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListIdentityProviders", {})
    .n("CognitoIdentityProviderClient", "ListIdentityProvidersCommand")
    .f(void 0, void 0)
    .ser(se_ListIdentityProvidersCommand)
    .de(de_ListIdentityProvidersCommand)
    .build() {
}

class ListResourceServersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListResourceServers", {})
    .n("CognitoIdentityProviderClient", "ListResourceServersCommand")
    .f(void 0, void 0)
    .ser(se_ListResourceServersCommand)
    .de(de_ListResourceServersCommand)
    .build() {
}

class ListTagsForResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListTagsForResource", {})
    .n("CognitoIdentityProviderClient", "ListTagsForResourceCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsForResourceCommand)
    .de(de_ListTagsForResourceCommand)
    .build() {
}

class ListTermsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListTerms", {})
    .n("CognitoIdentityProviderClient", "ListTermsCommand")
    .f(void 0, void 0)
    .ser(se_ListTermsCommand)
    .de(de_ListTermsCommand)
    .build() {
}

class ListUserImportJobsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListUserImportJobs", {})
    .n("CognitoIdentityProviderClient", "ListUserImportJobsCommand")
    .f(void 0, void 0)
    .ser(se_ListUserImportJobsCommand)
    .de(de_ListUserImportJobsCommand)
    .build() {
}

class ListUserPoolClientsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListUserPoolClients", {})
    .n("CognitoIdentityProviderClient", "ListUserPoolClientsCommand")
    .f(void 0, ListUserPoolClientsResponseFilterSensitiveLog)
    .ser(se_ListUserPoolClientsCommand)
    .de(de_ListUserPoolClientsCommand)
    .build() {
}

class ListUserPoolsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListUserPools", {})
    .n("CognitoIdentityProviderClient", "ListUserPoolsCommand")
    .f(void 0, void 0)
    .ser(se_ListUserPoolsCommand)
    .de(de_ListUserPoolsCommand)
    .build() {
}

class ListUsersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListUsers", {})
    .n("CognitoIdentityProviderClient", "ListUsersCommand")
    .f(void 0, ListUsersResponseFilterSensitiveLog)
    .ser(se_ListUsersCommand)
    .de(de_ListUsersCommand)
    .build() {
}

class ListUsersInGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListUsersInGroup", {})
    .n("CognitoIdentityProviderClient", "ListUsersInGroupCommand")
    .f(void 0, ListUsersInGroupResponseFilterSensitiveLog)
    .ser(se_ListUsersInGroupCommand)
    .de(de_ListUsersInGroupCommand)
    .build() {
}

class ListWebAuthnCredentialsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ListWebAuthnCredentials", {})
    .n("CognitoIdentityProviderClient", "ListWebAuthnCredentialsCommand")
    .f(ListWebAuthnCredentialsRequestFilterSensitiveLog, void 0)
    .ser(se_ListWebAuthnCredentialsCommand)
    .de(de_ListWebAuthnCredentialsCommand)
    .build() {
}

class ResendConfirmationCodeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "ResendConfirmationCode", {})
    .n("CognitoIdentityProviderClient", "ResendConfirmationCodeCommand")
    .f(ResendConfirmationCodeRequestFilterSensitiveLog, void 0)
    .ser(se_ResendConfirmationCodeCommand)
    .de(de_ResendConfirmationCodeCommand)
    .build() {
}

class RespondToAuthChallengeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "RespondToAuthChallenge", {})
    .n("CognitoIdentityProviderClient", "RespondToAuthChallengeCommand")
    .f(RespondToAuthChallengeRequestFilterSensitiveLog, RespondToAuthChallengeResponseFilterSensitiveLog)
    .ser(se_RespondToAuthChallengeCommand)
    .de(de_RespondToAuthChallengeCommand)
    .build() {
}

class RevokeTokenCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "RevokeToken", {})
    .n("CognitoIdentityProviderClient", "RevokeTokenCommand")
    .f(RevokeTokenRequestFilterSensitiveLog, void 0)
    .ser(se_RevokeTokenCommand)
    .de(de_RevokeTokenCommand)
    .build() {
}

class SetLogDeliveryConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "SetLogDeliveryConfiguration", {})
    .n("CognitoIdentityProviderClient", "SetLogDeliveryConfigurationCommand")
    .f(void 0, void 0)
    .ser(se_SetLogDeliveryConfigurationCommand)
    .de(de_SetLogDeliveryConfigurationCommand)
    .build() {
}

class SetRiskConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "SetRiskConfiguration", {})
    .n("CognitoIdentityProviderClient", "SetRiskConfigurationCommand")
    .f(SetRiskConfigurationRequestFilterSensitiveLog, SetRiskConfigurationResponseFilterSensitiveLog)
    .ser(se_SetRiskConfigurationCommand)
    .de(de_SetRiskConfigurationCommand)
    .build() {
}

class SetUICustomizationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "SetUICustomization", {})
    .n("CognitoIdentityProviderClient", "SetUICustomizationCommand")
    .f(SetUICustomizationRequestFilterSensitiveLog, SetUICustomizationResponseFilterSensitiveLog)
    .ser(se_SetUICustomizationCommand)
    .de(de_SetUICustomizationCommand)
    .build() {
}

class SetUserMFAPreferenceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "SetUserMFAPreference", {})
    .n("CognitoIdentityProviderClient", "SetUserMFAPreferenceCommand")
    .f(SetUserMFAPreferenceRequestFilterSensitiveLog, void 0)
    .ser(se_SetUserMFAPreferenceCommand)
    .de(de_SetUserMFAPreferenceCommand)
    .build() {
}

class SetUserPoolMfaConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "SetUserPoolMfaConfig", {})
    .n("CognitoIdentityProviderClient", "SetUserPoolMfaConfigCommand")
    .f(void 0, void 0)
    .ser(se_SetUserPoolMfaConfigCommand)
    .de(de_SetUserPoolMfaConfigCommand)
    .build() {
}

class SetUserSettingsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "SetUserSettings", {})
    .n("CognitoIdentityProviderClient", "SetUserSettingsCommand")
    .f(SetUserSettingsRequestFilterSensitiveLog, void 0)
    .ser(se_SetUserSettingsCommand)
    .de(de_SetUserSettingsCommand)
    .build() {
}

class SignUpCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "SignUp", {})
    .n("CognitoIdentityProviderClient", "SignUpCommand")
    .f(SignUpRequestFilterSensitiveLog, SignUpResponseFilterSensitiveLog)
    .ser(se_SignUpCommand)
    .de(de_SignUpCommand)
    .build() {
}

class StartUserImportJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "StartUserImportJob", {})
    .n("CognitoIdentityProviderClient", "StartUserImportJobCommand")
    .f(void 0, void 0)
    .ser(se_StartUserImportJobCommand)
    .de(de_StartUserImportJobCommand)
    .build() {
}

class StartWebAuthnRegistrationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "StartWebAuthnRegistration", {})
    .n("CognitoIdentityProviderClient", "StartWebAuthnRegistrationCommand")
    .f(StartWebAuthnRegistrationRequestFilterSensitiveLog, void 0)
    .ser(se_StartWebAuthnRegistrationCommand)
    .de(de_StartWebAuthnRegistrationCommand)
    .build() {
}

class StopUserImportJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "StopUserImportJob", {})
    .n("CognitoIdentityProviderClient", "StopUserImportJobCommand")
    .f(void 0, void 0)
    .ser(se_StopUserImportJobCommand)
    .de(de_StopUserImportJobCommand)
    .build() {
}

class TagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "TagResource", {})
    .n("CognitoIdentityProviderClient", "TagResourceCommand")
    .f(void 0, void 0)
    .ser(se_TagResourceCommand)
    .de(de_TagResourceCommand)
    .build() {
}

class UntagResourceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UntagResource", {})
    .n("CognitoIdentityProviderClient", "UntagResourceCommand")
    .f(void 0, void 0)
    .ser(se_UntagResourceCommand)
    .de(de_UntagResourceCommand)
    .build() {
}

class UpdateAuthEventFeedbackCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UpdateAuthEventFeedback", {})
    .n("CognitoIdentityProviderClient", "UpdateAuthEventFeedbackCommand")
    .f(UpdateAuthEventFeedbackRequestFilterSensitiveLog, void 0)
    .ser(se_UpdateAuthEventFeedbackCommand)
    .de(de_UpdateAuthEventFeedbackCommand)
    .build() {
}

class UpdateDeviceStatusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UpdateDeviceStatus", {})
    .n("CognitoIdentityProviderClient", "UpdateDeviceStatusCommand")
    .f(UpdateDeviceStatusRequestFilterSensitiveLog, void 0)
    .ser(se_UpdateDeviceStatusCommand)
    .de(de_UpdateDeviceStatusCommand)
    .build() {
}

class UpdateGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UpdateGroup", {})
    .n("CognitoIdentityProviderClient", "UpdateGroupCommand")
    .f(void 0, void 0)
    .ser(se_UpdateGroupCommand)
    .de(de_UpdateGroupCommand)
    .build() {
}

class UpdateIdentityProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UpdateIdentityProvider", {})
    .n("CognitoIdentityProviderClient", "UpdateIdentityProviderCommand")
    .f(void 0, void 0)
    .ser(se_UpdateIdentityProviderCommand)
    .de(de_UpdateIdentityProviderCommand)
    .build() {
}

class UpdateManagedLoginBrandingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UpdateManagedLoginBranding", {})
    .n("CognitoIdentityProviderClient", "UpdateManagedLoginBrandingCommand")
    .f(void 0, void 0)
    .ser(se_UpdateManagedLoginBrandingCommand)
    .de(de_UpdateManagedLoginBrandingCommand)
    .build() {
}

class UpdateResourceServerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UpdateResourceServer", {})
    .n("CognitoIdentityProviderClient", "UpdateResourceServerCommand")
    .f(void 0, void 0)
    .ser(se_UpdateResourceServerCommand)
    .de(de_UpdateResourceServerCommand)
    .build() {
}

class UpdateTermsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UpdateTerms", {})
    .n("CognitoIdentityProviderClient", "UpdateTermsCommand")
    .f(void 0, UpdateTermsResponseFilterSensitiveLog)
    .ser(se_UpdateTermsCommand)
    .de(de_UpdateTermsCommand)
    .build() {
}

class UpdateUserAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UpdateUserAttributes", {})
    .n("CognitoIdentityProviderClient", "UpdateUserAttributesCommand")
    .f(UpdateUserAttributesRequestFilterSensitiveLog, void 0)
    .ser(se_UpdateUserAttributesCommand)
    .de(de_UpdateUserAttributesCommand)
    .build() {
}

class UpdateUserPoolClientCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UpdateUserPoolClient", {})
    .n("CognitoIdentityProviderClient", "UpdateUserPoolClientCommand")
    .f(UpdateUserPoolClientRequestFilterSensitiveLog, UpdateUserPoolClientResponseFilterSensitiveLog)
    .ser(se_UpdateUserPoolClientCommand)
    .de(de_UpdateUserPoolClientCommand)
    .build() {
}

class UpdateUserPoolCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UpdateUserPool", {})
    .n("CognitoIdentityProviderClient", "UpdateUserPoolCommand")
    .f(void 0, void 0)
    .ser(se_UpdateUserPoolCommand)
    .de(de_UpdateUserPoolCommand)
    .build() {
}

class UpdateUserPoolDomainCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "UpdateUserPoolDomain", {})
    .n("CognitoIdentityProviderClient", "UpdateUserPoolDomainCommand")
    .f(void 0, void 0)
    .ser(se_UpdateUserPoolDomainCommand)
    .de(de_UpdateUserPoolDomainCommand)
    .build() {
}

class VerifySoftwareTokenCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "VerifySoftwareToken", {})
    .n("CognitoIdentityProviderClient", "VerifySoftwareTokenCommand")
    .f(VerifySoftwareTokenRequestFilterSensitiveLog, VerifySoftwareTokenResponseFilterSensitiveLog)
    .ser(se_VerifySoftwareTokenCommand)
    .de(de_VerifySoftwareTokenCommand)
    .build() {
}

class VerifyUserAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AWSCognitoIdentityProviderService", "VerifyUserAttribute", {})
    .n("CognitoIdentityProviderClient", "VerifyUserAttributeCommand")
    .f(VerifyUserAttributeRequestFilterSensitiveLog, void 0)
    .ser(se_VerifyUserAttributeCommand)
    .de(de_VerifyUserAttributeCommand)
    .build() {
}

const commands = {
    AddCustomAttributesCommand,
    AdminAddUserToGroupCommand,
    AdminConfirmSignUpCommand,
    AdminCreateUserCommand,
    AdminDeleteUserCommand,
    AdminDeleteUserAttributesCommand,
    AdminDisableProviderForUserCommand,
    AdminDisableUserCommand,
    AdminEnableUserCommand,
    AdminForgetDeviceCommand,
    AdminGetDeviceCommand,
    AdminGetUserCommand,
    AdminInitiateAuthCommand,
    AdminLinkProviderForUserCommand,
    AdminListDevicesCommand,
    AdminListGroupsForUserCommand,
    AdminListUserAuthEventsCommand,
    AdminRemoveUserFromGroupCommand,
    AdminResetUserPasswordCommand,
    AdminRespondToAuthChallengeCommand,
    AdminSetUserMFAPreferenceCommand,
    AdminSetUserPasswordCommand,
    AdminSetUserSettingsCommand,
    AdminUpdateAuthEventFeedbackCommand,
    AdminUpdateDeviceStatusCommand,
    AdminUpdateUserAttributesCommand,
    AdminUserGlobalSignOutCommand,
    AssociateSoftwareTokenCommand,
    ChangePasswordCommand,
    CompleteWebAuthnRegistrationCommand,
    ConfirmDeviceCommand,
    ConfirmForgotPasswordCommand,
    ConfirmSignUpCommand,
    CreateGroupCommand,
    CreateIdentityProviderCommand,
    CreateManagedLoginBrandingCommand,
    CreateResourceServerCommand,
    CreateTermsCommand,
    CreateUserImportJobCommand,
    CreateUserPoolCommand,
    CreateUserPoolClientCommand,
    CreateUserPoolDomainCommand,
    DeleteGroupCommand,
    DeleteIdentityProviderCommand,
    DeleteManagedLoginBrandingCommand,
    DeleteResourceServerCommand,
    DeleteTermsCommand,
    DeleteUserCommand,
    DeleteUserAttributesCommand,
    DeleteUserPoolCommand,
    DeleteUserPoolClientCommand,
    DeleteUserPoolDomainCommand,
    DeleteWebAuthnCredentialCommand,
    DescribeIdentityProviderCommand,
    DescribeManagedLoginBrandingCommand,
    DescribeManagedLoginBrandingByClientCommand,
    DescribeResourceServerCommand,
    DescribeRiskConfigurationCommand,
    DescribeTermsCommand,
    DescribeUserImportJobCommand,
    DescribeUserPoolCommand,
    DescribeUserPoolClientCommand,
    DescribeUserPoolDomainCommand,
    ForgetDeviceCommand,
    ForgotPasswordCommand,
    GetCSVHeaderCommand,
    GetDeviceCommand,
    GetGroupCommand,
    GetIdentityProviderByIdentifierCommand,
    GetLogDeliveryConfigurationCommand,
    GetSigningCertificateCommand,
    GetTokensFromRefreshTokenCommand,
    GetUICustomizationCommand,
    GetUserCommand,
    GetUserAttributeVerificationCodeCommand,
    GetUserAuthFactorsCommand,
    GetUserPoolMfaConfigCommand,
    GlobalSignOutCommand,
    InitiateAuthCommand,
    ListDevicesCommand,
    ListGroupsCommand,
    ListIdentityProvidersCommand,
    ListResourceServersCommand,
    ListTagsForResourceCommand,
    ListTermsCommand,
    ListUserImportJobsCommand,
    ListUserPoolClientsCommand,
    ListUserPoolsCommand,
    ListUsersCommand,
    ListUsersInGroupCommand,
    ListWebAuthnCredentialsCommand,
    ResendConfirmationCodeCommand,
    RespondToAuthChallengeCommand,
    RevokeTokenCommand,
    SetLogDeliveryConfigurationCommand,
    SetRiskConfigurationCommand,
    SetUICustomizationCommand,
    SetUserMFAPreferenceCommand,
    SetUserPoolMfaConfigCommand,
    SetUserSettingsCommand,
    SignUpCommand,
    StartUserImportJobCommand,
    StartWebAuthnRegistrationCommand,
    StopUserImportJobCommand,
    TagResourceCommand,
    UntagResourceCommand,
    UpdateAuthEventFeedbackCommand,
    UpdateDeviceStatusCommand,
    UpdateGroupCommand,
    UpdateIdentityProviderCommand,
    UpdateManagedLoginBrandingCommand,
    UpdateResourceServerCommand,
    UpdateTermsCommand,
    UpdateUserAttributesCommand,
    UpdateUserPoolCommand,
    UpdateUserPoolClientCommand,
    UpdateUserPoolDomainCommand,
    VerifySoftwareTokenCommand,
    VerifyUserAttributeCommand,
};
class CognitoIdentityProvider extends CognitoIdentityProviderClient {
}
smithyClient.createAggregatedClient(commands, CognitoIdentityProvider);

const paginateAdminListGroupsForUser = core.createPaginator(CognitoIdentityProviderClient, AdminListGroupsForUserCommand, "NextToken", "NextToken", "Limit");

const paginateAdminListUserAuthEvents = core.createPaginator(CognitoIdentityProviderClient, AdminListUserAuthEventsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListGroups = core.createPaginator(CognitoIdentityProviderClient, ListGroupsCommand, "NextToken", "NextToken", "Limit");

const paginateListIdentityProviders = core.createPaginator(CognitoIdentityProviderClient, ListIdentityProvidersCommand, "NextToken", "NextToken", "MaxResults");

const paginateListResourceServers = core.createPaginator(CognitoIdentityProviderClient, ListResourceServersCommand, "NextToken", "NextToken", "MaxResults");

const paginateListUserPoolClients = core.createPaginator(CognitoIdentityProviderClient, ListUserPoolClientsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListUserPools = core.createPaginator(CognitoIdentityProviderClient, ListUserPoolsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListUsersInGroup = core.createPaginator(CognitoIdentityProviderClient, ListUsersInGroupCommand, "NextToken", "NextToken", "Limit");

const paginateListUsers = core.createPaginator(CognitoIdentityProviderClient, ListUsersCommand, "PaginationToken", "PaginationToken", "Limit");

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.AccountTakeoverEventActionType = AccountTakeoverEventActionType;
exports.AddCustomAttributesCommand = AddCustomAttributesCommand;
exports.AdminAddUserToGroupCommand = AdminAddUserToGroupCommand;
exports.AdminAddUserToGroupRequestFilterSensitiveLog = AdminAddUserToGroupRequestFilterSensitiveLog;
exports.AdminConfirmSignUpCommand = AdminConfirmSignUpCommand;
exports.AdminConfirmSignUpRequestFilterSensitiveLog = AdminConfirmSignUpRequestFilterSensitiveLog;
exports.AdminCreateUserCommand = AdminCreateUserCommand;
exports.AdminCreateUserRequestFilterSensitiveLog = AdminCreateUserRequestFilterSensitiveLog;
exports.AdminCreateUserResponseFilterSensitiveLog = AdminCreateUserResponseFilterSensitiveLog;
exports.AdminDeleteUserAttributesCommand = AdminDeleteUserAttributesCommand;
exports.AdminDeleteUserAttributesRequestFilterSensitiveLog = AdminDeleteUserAttributesRequestFilterSensitiveLog;
exports.AdminDeleteUserCommand = AdminDeleteUserCommand;
exports.AdminDeleteUserRequestFilterSensitiveLog = AdminDeleteUserRequestFilterSensitiveLog;
exports.AdminDisableProviderForUserCommand = AdminDisableProviderForUserCommand;
exports.AdminDisableUserCommand = AdminDisableUserCommand;
exports.AdminDisableUserRequestFilterSensitiveLog = AdminDisableUserRequestFilterSensitiveLog;
exports.AdminEnableUserCommand = AdminEnableUserCommand;
exports.AdminEnableUserRequestFilterSensitiveLog = AdminEnableUserRequestFilterSensitiveLog;
exports.AdminForgetDeviceCommand = AdminForgetDeviceCommand;
exports.AdminForgetDeviceRequestFilterSensitiveLog = AdminForgetDeviceRequestFilterSensitiveLog;
exports.AdminGetDeviceCommand = AdminGetDeviceCommand;
exports.AdminGetDeviceRequestFilterSensitiveLog = AdminGetDeviceRequestFilterSensitiveLog;
exports.AdminGetDeviceResponseFilterSensitiveLog = AdminGetDeviceResponseFilterSensitiveLog;
exports.AdminGetUserCommand = AdminGetUserCommand;
exports.AdminGetUserRequestFilterSensitiveLog = AdminGetUserRequestFilterSensitiveLog;
exports.AdminGetUserResponseFilterSensitiveLog = AdminGetUserResponseFilterSensitiveLog;
exports.AdminInitiateAuthCommand = AdminInitiateAuthCommand;
exports.AdminInitiateAuthRequestFilterSensitiveLog = AdminInitiateAuthRequestFilterSensitiveLog;
exports.AdminInitiateAuthResponseFilterSensitiveLog = AdminInitiateAuthResponseFilterSensitiveLog;
exports.AdminLinkProviderForUserCommand = AdminLinkProviderForUserCommand;
exports.AdminListDevicesCommand = AdminListDevicesCommand;
exports.AdminListDevicesRequestFilterSensitiveLog = AdminListDevicesRequestFilterSensitiveLog;
exports.AdminListDevicesResponseFilterSensitiveLog = AdminListDevicesResponseFilterSensitiveLog;
exports.AdminListGroupsForUserCommand = AdminListGroupsForUserCommand;
exports.AdminListGroupsForUserRequestFilterSensitiveLog = AdminListGroupsForUserRequestFilterSensitiveLog;
exports.AdminListUserAuthEventsCommand = AdminListUserAuthEventsCommand;
exports.AdminListUserAuthEventsRequestFilterSensitiveLog = AdminListUserAuthEventsRequestFilterSensitiveLog;
exports.AdminRemoveUserFromGroupCommand = AdminRemoveUserFromGroupCommand;
exports.AdminRemoveUserFromGroupRequestFilterSensitiveLog = AdminRemoveUserFromGroupRequestFilterSensitiveLog;
exports.AdminResetUserPasswordCommand = AdminResetUserPasswordCommand;
exports.AdminResetUserPasswordRequestFilterSensitiveLog = AdminResetUserPasswordRequestFilterSensitiveLog;
exports.AdminRespondToAuthChallengeCommand = AdminRespondToAuthChallengeCommand;
exports.AdminRespondToAuthChallengeRequestFilterSensitiveLog = AdminRespondToAuthChallengeRequestFilterSensitiveLog;
exports.AdminRespondToAuthChallengeResponseFilterSensitiveLog = AdminRespondToAuthChallengeResponseFilterSensitiveLog;
exports.AdminSetUserMFAPreferenceCommand = AdminSetUserMFAPreferenceCommand;
exports.AdminSetUserMFAPreferenceRequestFilterSensitiveLog = AdminSetUserMFAPreferenceRequestFilterSensitiveLog;
exports.AdminSetUserPasswordCommand = AdminSetUserPasswordCommand;
exports.AdminSetUserPasswordRequestFilterSensitiveLog = AdminSetUserPasswordRequestFilterSensitiveLog;
exports.AdminSetUserSettingsCommand = AdminSetUserSettingsCommand;
exports.AdminSetUserSettingsRequestFilterSensitiveLog = AdminSetUserSettingsRequestFilterSensitiveLog;
exports.AdminUpdateAuthEventFeedbackCommand = AdminUpdateAuthEventFeedbackCommand;
exports.AdminUpdateAuthEventFeedbackRequestFilterSensitiveLog = AdminUpdateAuthEventFeedbackRequestFilterSensitiveLog;
exports.AdminUpdateDeviceStatusCommand = AdminUpdateDeviceStatusCommand;
exports.AdminUpdateDeviceStatusRequestFilterSensitiveLog = AdminUpdateDeviceStatusRequestFilterSensitiveLog;
exports.AdminUpdateUserAttributesCommand = AdminUpdateUserAttributesCommand;
exports.AdminUpdateUserAttributesRequestFilterSensitiveLog = AdminUpdateUserAttributesRequestFilterSensitiveLog;
exports.AdminUserGlobalSignOutCommand = AdminUserGlobalSignOutCommand;
exports.AdminUserGlobalSignOutRequestFilterSensitiveLog = AdminUserGlobalSignOutRequestFilterSensitiveLog;
exports.AdvancedSecurityEnabledModeType = AdvancedSecurityEnabledModeType;
exports.AdvancedSecurityModeType = AdvancedSecurityModeType;
exports.AliasAttributeType = AliasAttributeType;
exports.AliasExistsException = AliasExistsException;
exports.AssetCategoryType = AssetCategoryType;
exports.AssetExtensionType = AssetExtensionType;
exports.AssociateSoftwareTokenCommand = AssociateSoftwareTokenCommand;
exports.AssociateSoftwareTokenRequestFilterSensitiveLog = AssociateSoftwareTokenRequestFilterSensitiveLog;
exports.AssociateSoftwareTokenResponseFilterSensitiveLog = AssociateSoftwareTokenResponseFilterSensitiveLog;
exports.AttributeDataType = AttributeDataType;
exports.AttributeTypeFilterSensitiveLog = AttributeTypeFilterSensitiveLog;
exports.AuthFactorType = AuthFactorType;
exports.AuthFlowType = AuthFlowType;
exports.AuthenticationResultTypeFilterSensitiveLog = AuthenticationResultTypeFilterSensitiveLog;
exports.ChallengeName = ChallengeName;
exports.ChallengeNameType = ChallengeNameType;
exports.ChallengeResponse = ChallengeResponse;
exports.ChangePasswordCommand = ChangePasswordCommand;
exports.ChangePasswordRequestFilterSensitiveLog = ChangePasswordRequestFilterSensitiveLog;
exports.CodeDeliveryFailureException = CodeDeliveryFailureException;
exports.CodeMismatchException = CodeMismatchException;
exports.CognitoIdentityProvider = CognitoIdentityProvider;
exports.CognitoIdentityProviderClient = CognitoIdentityProviderClient;
exports.CognitoIdentityProviderServiceException = CognitoIdentityProviderServiceException;
exports.ColorSchemeModeType = ColorSchemeModeType;
exports.CompleteWebAuthnRegistrationCommand = CompleteWebAuthnRegistrationCommand;
exports.CompleteWebAuthnRegistrationRequestFilterSensitiveLog = CompleteWebAuthnRegistrationRequestFilterSensitiveLog;
exports.CompromisedCredentialsEventActionType = CompromisedCredentialsEventActionType;
exports.ConcurrentModificationException = ConcurrentModificationException;
exports.ConfirmDeviceCommand = ConfirmDeviceCommand;
exports.ConfirmDeviceRequestFilterSensitiveLog = ConfirmDeviceRequestFilterSensitiveLog;
exports.ConfirmForgotPasswordCommand = ConfirmForgotPasswordCommand;
exports.ConfirmForgotPasswordRequestFilterSensitiveLog = ConfirmForgotPasswordRequestFilterSensitiveLog;
exports.ConfirmSignUpCommand = ConfirmSignUpCommand;
exports.ConfirmSignUpRequestFilterSensitiveLog = ConfirmSignUpRequestFilterSensitiveLog;
exports.ConfirmSignUpResponseFilterSensitiveLog = ConfirmSignUpResponseFilterSensitiveLog;
exports.CreateGroupCommand = CreateGroupCommand;
exports.CreateIdentityProviderCommand = CreateIdentityProviderCommand;
exports.CreateManagedLoginBrandingCommand = CreateManagedLoginBrandingCommand;
exports.CreateManagedLoginBrandingRequestFilterSensitiveLog = CreateManagedLoginBrandingRequestFilterSensitiveLog;
exports.CreateResourceServerCommand = CreateResourceServerCommand;
exports.CreateTermsCommand = CreateTermsCommand;
exports.CreateTermsRequestFilterSensitiveLog = CreateTermsRequestFilterSensitiveLog;
exports.CreateTermsResponseFilterSensitiveLog = CreateTermsResponseFilterSensitiveLog;
exports.CreateUserImportJobCommand = CreateUserImportJobCommand;
exports.CreateUserPoolClientCommand = CreateUserPoolClientCommand;
exports.CreateUserPoolClientResponseFilterSensitiveLog = CreateUserPoolClientResponseFilterSensitiveLog;
exports.CreateUserPoolCommand = CreateUserPoolCommand;
exports.CreateUserPoolDomainCommand = CreateUserPoolDomainCommand;
exports.CustomEmailSenderLambdaVersionType = CustomEmailSenderLambdaVersionType;
exports.CustomSMSSenderLambdaVersionType = CustomSMSSenderLambdaVersionType;
exports.DefaultEmailOptionType = DefaultEmailOptionType;
exports.DeleteGroupCommand = DeleteGroupCommand;
exports.DeleteIdentityProviderCommand = DeleteIdentityProviderCommand;
exports.DeleteManagedLoginBrandingCommand = DeleteManagedLoginBrandingCommand;
exports.DeleteResourceServerCommand = DeleteResourceServerCommand;
exports.DeleteTermsCommand = DeleteTermsCommand;
exports.DeleteUserAttributesCommand = DeleteUserAttributesCommand;
exports.DeleteUserAttributesRequestFilterSensitiveLog = DeleteUserAttributesRequestFilterSensitiveLog;
exports.DeleteUserCommand = DeleteUserCommand;
exports.DeleteUserPoolClientCommand = DeleteUserPoolClientCommand;
exports.DeleteUserPoolClientRequestFilterSensitiveLog = DeleteUserPoolClientRequestFilterSensitiveLog;
exports.DeleteUserPoolCommand = DeleteUserPoolCommand;
exports.DeleteUserPoolDomainCommand = DeleteUserPoolDomainCommand;
exports.DeleteUserRequestFilterSensitiveLog = DeleteUserRequestFilterSensitiveLog;
exports.DeleteWebAuthnCredentialCommand = DeleteWebAuthnCredentialCommand;
exports.DeleteWebAuthnCredentialRequestFilterSensitiveLog = DeleteWebAuthnCredentialRequestFilterSensitiveLog;
exports.DeletionProtectionType = DeletionProtectionType;
exports.DeliveryMediumType = DeliveryMediumType;
exports.DescribeIdentityProviderCommand = DescribeIdentityProviderCommand;
exports.DescribeManagedLoginBrandingByClientCommand = DescribeManagedLoginBrandingByClientCommand;
exports.DescribeManagedLoginBrandingByClientRequestFilterSensitiveLog = DescribeManagedLoginBrandingByClientRequestFilterSensitiveLog;
exports.DescribeManagedLoginBrandingCommand = DescribeManagedLoginBrandingCommand;
exports.DescribeResourceServerCommand = DescribeResourceServerCommand;
exports.DescribeRiskConfigurationCommand = DescribeRiskConfigurationCommand;
exports.DescribeRiskConfigurationRequestFilterSensitiveLog = DescribeRiskConfigurationRequestFilterSensitiveLog;
exports.DescribeRiskConfigurationResponseFilterSensitiveLog = DescribeRiskConfigurationResponseFilterSensitiveLog;
exports.DescribeTermsCommand = DescribeTermsCommand;
exports.DescribeTermsResponseFilterSensitiveLog = DescribeTermsResponseFilterSensitiveLog;
exports.DescribeUserImportJobCommand = DescribeUserImportJobCommand;
exports.DescribeUserPoolClientCommand = DescribeUserPoolClientCommand;
exports.DescribeUserPoolClientRequestFilterSensitiveLog = DescribeUserPoolClientRequestFilterSensitiveLog;
exports.DescribeUserPoolClientResponseFilterSensitiveLog = DescribeUserPoolClientResponseFilterSensitiveLog;
exports.DescribeUserPoolCommand = DescribeUserPoolCommand;
exports.DescribeUserPoolDomainCommand = DescribeUserPoolDomainCommand;
exports.DeviceKeyExistsException = DeviceKeyExistsException;
exports.DeviceRememberedStatusType = DeviceRememberedStatusType;
exports.DeviceTypeFilterSensitiveLog = DeviceTypeFilterSensitiveLog;
exports.DomainStatusType = DomainStatusType;
exports.DuplicateProviderException = DuplicateProviderException;
exports.EmailSendingAccountType = EmailSendingAccountType;
exports.EnableSoftwareTokenMFAException = EnableSoftwareTokenMFAException;
exports.EventFilterType = EventFilterType;
exports.EventResponseType = EventResponseType;
exports.EventSourceName = EventSourceName;
exports.EventType = EventType;
exports.ExpiredCodeException = ExpiredCodeException;
exports.ExplicitAuthFlowsType = ExplicitAuthFlowsType;
exports.FeatureType = FeatureType;
exports.FeatureUnavailableInTierException = FeatureUnavailableInTierException;
exports.FeedbackValueType = FeedbackValueType;
exports.ForbiddenException = ForbiddenException;
exports.ForgetDeviceCommand = ForgetDeviceCommand;
exports.ForgetDeviceRequestFilterSensitiveLog = ForgetDeviceRequestFilterSensitiveLog;
exports.ForgotPasswordCommand = ForgotPasswordCommand;
exports.ForgotPasswordRequestFilterSensitiveLog = ForgotPasswordRequestFilterSensitiveLog;
exports.GetCSVHeaderCommand = GetCSVHeaderCommand;
exports.GetDeviceCommand = GetDeviceCommand;
exports.GetDeviceRequestFilterSensitiveLog = GetDeviceRequestFilterSensitiveLog;
exports.GetDeviceResponseFilterSensitiveLog = GetDeviceResponseFilterSensitiveLog;
exports.GetGroupCommand = GetGroupCommand;
exports.GetIdentityProviderByIdentifierCommand = GetIdentityProviderByIdentifierCommand;
exports.GetLogDeliveryConfigurationCommand = GetLogDeliveryConfigurationCommand;
exports.GetSigningCertificateCommand = GetSigningCertificateCommand;
exports.GetTokensFromRefreshTokenCommand = GetTokensFromRefreshTokenCommand;
exports.GetTokensFromRefreshTokenRequestFilterSensitiveLog = GetTokensFromRefreshTokenRequestFilterSensitiveLog;
exports.GetTokensFromRefreshTokenResponseFilterSensitiveLog = GetTokensFromRefreshTokenResponseFilterSensitiveLog;
exports.GetUICustomizationCommand = GetUICustomizationCommand;
exports.GetUICustomizationRequestFilterSensitiveLog = GetUICustomizationRequestFilterSensitiveLog;
exports.GetUICustomizationResponseFilterSensitiveLog = GetUICustomizationResponseFilterSensitiveLog;
exports.GetUserAttributeVerificationCodeCommand = GetUserAttributeVerificationCodeCommand;
exports.GetUserAttributeVerificationCodeRequestFilterSensitiveLog = GetUserAttributeVerificationCodeRequestFilterSensitiveLog;
exports.GetUserAuthFactorsCommand = GetUserAuthFactorsCommand;
exports.GetUserAuthFactorsRequestFilterSensitiveLog = GetUserAuthFactorsRequestFilterSensitiveLog;
exports.GetUserAuthFactorsResponseFilterSensitiveLog = GetUserAuthFactorsResponseFilterSensitiveLog;
exports.GetUserCommand = GetUserCommand;
exports.GetUserPoolMfaConfigCommand = GetUserPoolMfaConfigCommand;
exports.GetUserRequestFilterSensitiveLog = GetUserRequestFilterSensitiveLog;
exports.GetUserResponseFilterSensitiveLog = GetUserResponseFilterSensitiveLog;
exports.GlobalSignOutCommand = GlobalSignOutCommand;
exports.GlobalSignOutRequestFilterSensitiveLog = GlobalSignOutRequestFilterSensitiveLog;
exports.GroupExistsException = GroupExistsException;
exports.IdentityProviderTypeType = IdentityProviderTypeType;
exports.InitiateAuthCommand = InitiateAuthCommand;
exports.InitiateAuthRequestFilterSensitiveLog = InitiateAuthRequestFilterSensitiveLog;
exports.InitiateAuthResponseFilterSensitiveLog = InitiateAuthResponseFilterSensitiveLog;
exports.InternalErrorException = InternalErrorException;
exports.InvalidEmailRoleAccessPolicyException = InvalidEmailRoleAccessPolicyException;
exports.InvalidLambdaResponseException = InvalidLambdaResponseException;
exports.InvalidOAuthFlowException = InvalidOAuthFlowException;
exports.InvalidParameterException = InvalidParameterException;
exports.InvalidPasswordException = InvalidPasswordException;
exports.InvalidSmsRoleAccessPolicyException = InvalidSmsRoleAccessPolicyException;
exports.InvalidSmsRoleTrustRelationshipException = InvalidSmsRoleTrustRelationshipException;
exports.InvalidUserPoolConfigurationException = InvalidUserPoolConfigurationException;
exports.LimitExceededException = LimitExceededException;
exports.ListDevicesCommand = ListDevicesCommand;
exports.ListDevicesRequestFilterSensitiveLog = ListDevicesRequestFilterSensitiveLog;
exports.ListDevicesResponseFilterSensitiveLog = ListDevicesResponseFilterSensitiveLog;
exports.ListGroupsCommand = ListGroupsCommand;
exports.ListIdentityProvidersCommand = ListIdentityProvidersCommand;
exports.ListResourceServersCommand = ListResourceServersCommand;
exports.ListTagsForResourceCommand = ListTagsForResourceCommand;
exports.ListTermsCommand = ListTermsCommand;
exports.ListUserImportJobsCommand = ListUserImportJobsCommand;
exports.ListUserPoolClientsCommand = ListUserPoolClientsCommand;
exports.ListUserPoolClientsResponseFilterSensitiveLog = ListUserPoolClientsResponseFilterSensitiveLog;
exports.ListUserPoolsCommand = ListUserPoolsCommand;
exports.ListUsersCommand = ListUsersCommand;
exports.ListUsersInGroupCommand = ListUsersInGroupCommand;
exports.ListUsersInGroupResponseFilterSensitiveLog = ListUsersInGroupResponseFilterSensitiveLog;
exports.ListUsersResponseFilterSensitiveLog = ListUsersResponseFilterSensitiveLog;
exports.ListWebAuthnCredentialsCommand = ListWebAuthnCredentialsCommand;
exports.ListWebAuthnCredentialsRequestFilterSensitiveLog = ListWebAuthnCredentialsRequestFilterSensitiveLog;
exports.LogLevel = LogLevel;
exports.MFAMethodNotFoundException = MFAMethodNotFoundException;
exports.ManagedLoginBrandingExistsException = ManagedLoginBrandingExistsException;
exports.MessageActionType = MessageActionType;
exports.NotAuthorizedException = NotAuthorizedException;
exports.OAuthFlowType = OAuthFlowType;
exports.PasswordHistoryPolicyViolationException = PasswordHistoryPolicyViolationException;
exports.PasswordResetRequiredException = PasswordResetRequiredException;
exports.PreTokenGenerationLambdaVersionType = PreTokenGenerationLambdaVersionType;
exports.PreconditionNotMetException = PreconditionNotMetException;
exports.PreventUserExistenceErrorTypes = PreventUserExistenceErrorTypes;
exports.RecoveryOptionNameType = RecoveryOptionNameType;
exports.RefreshTokenReuseException = RefreshTokenReuseException;
exports.ResendConfirmationCodeCommand = ResendConfirmationCodeCommand;
exports.ResendConfirmationCodeRequestFilterSensitiveLog = ResendConfirmationCodeRequestFilterSensitiveLog;
exports.ResourceNotFoundException = ResourceNotFoundException;
exports.RespondToAuthChallengeCommand = RespondToAuthChallengeCommand;
exports.RespondToAuthChallengeRequestFilterSensitiveLog = RespondToAuthChallengeRequestFilterSensitiveLog;
exports.RespondToAuthChallengeResponseFilterSensitiveLog = RespondToAuthChallengeResponseFilterSensitiveLog;
exports.RevokeTokenCommand = RevokeTokenCommand;
exports.RevokeTokenRequestFilterSensitiveLog = RevokeTokenRequestFilterSensitiveLog;
exports.RiskConfigurationTypeFilterSensitiveLog = RiskConfigurationTypeFilterSensitiveLog;
exports.RiskDecisionType = RiskDecisionType;
exports.RiskLevelType = RiskLevelType;
exports.ScopeDoesNotExistException = ScopeDoesNotExistException;
exports.SetLogDeliveryConfigurationCommand = SetLogDeliveryConfigurationCommand;
exports.SetRiskConfigurationCommand = SetRiskConfigurationCommand;
exports.SetRiskConfigurationRequestFilterSensitiveLog = SetRiskConfigurationRequestFilterSensitiveLog;
exports.SetRiskConfigurationResponseFilterSensitiveLog = SetRiskConfigurationResponseFilterSensitiveLog;
exports.SetUICustomizationCommand = SetUICustomizationCommand;
exports.SetUICustomizationRequestFilterSensitiveLog = SetUICustomizationRequestFilterSensitiveLog;
exports.SetUICustomizationResponseFilterSensitiveLog = SetUICustomizationResponseFilterSensitiveLog;
exports.SetUserMFAPreferenceCommand = SetUserMFAPreferenceCommand;
exports.SetUserMFAPreferenceRequestFilterSensitiveLog = SetUserMFAPreferenceRequestFilterSensitiveLog;
exports.SetUserPoolMfaConfigCommand = SetUserPoolMfaConfigCommand;
exports.SetUserSettingsCommand = SetUserSettingsCommand;
exports.SetUserSettingsRequestFilterSensitiveLog = SetUserSettingsRequestFilterSensitiveLog;
exports.SignUpCommand = SignUpCommand;
exports.SignUpRequestFilterSensitiveLog = SignUpRequestFilterSensitiveLog;
exports.SignUpResponseFilterSensitiveLog = SignUpResponseFilterSensitiveLog;
exports.SoftwareTokenMFANotFoundException = SoftwareTokenMFANotFoundException;
exports.StartUserImportJobCommand = StartUserImportJobCommand;
exports.StartWebAuthnRegistrationCommand = StartWebAuthnRegistrationCommand;
exports.StartWebAuthnRegistrationRequestFilterSensitiveLog = StartWebAuthnRegistrationRequestFilterSensitiveLog;
exports.StatusType = StatusType;
exports.StopUserImportJobCommand = StopUserImportJobCommand;
exports.TagResourceCommand = TagResourceCommand;
exports.TermsEnforcementType = TermsEnforcementType;
exports.TermsExistsException = TermsExistsException;
exports.TermsSourceType = TermsSourceType;
exports.TermsTypeFilterSensitiveLog = TermsTypeFilterSensitiveLog;
exports.TierChangeNotAllowedException = TierChangeNotAllowedException;
exports.TimeUnitsType = TimeUnitsType;
exports.TooManyFailedAttemptsException = TooManyFailedAttemptsException;
exports.TooManyRequestsException = TooManyRequestsException;
exports.UICustomizationTypeFilterSensitiveLog = UICustomizationTypeFilterSensitiveLog;
exports.UnauthorizedException = UnauthorizedException;
exports.UnexpectedLambdaException = UnexpectedLambdaException;
exports.UnsupportedIdentityProviderException = UnsupportedIdentityProviderException;
exports.UnsupportedOperationException = UnsupportedOperationException;
exports.UnsupportedTokenTypeException = UnsupportedTokenTypeException;
exports.UnsupportedUserStateException = UnsupportedUserStateException;
exports.UntagResourceCommand = UntagResourceCommand;
exports.UpdateAuthEventFeedbackCommand = UpdateAuthEventFeedbackCommand;
exports.UpdateAuthEventFeedbackRequestFilterSensitiveLog = UpdateAuthEventFeedbackRequestFilterSensitiveLog;
exports.UpdateDeviceStatusCommand = UpdateDeviceStatusCommand;
exports.UpdateDeviceStatusRequestFilterSensitiveLog = UpdateDeviceStatusRequestFilterSensitiveLog;
exports.UpdateGroupCommand = UpdateGroupCommand;
exports.UpdateIdentityProviderCommand = UpdateIdentityProviderCommand;
exports.UpdateManagedLoginBrandingCommand = UpdateManagedLoginBrandingCommand;
exports.UpdateResourceServerCommand = UpdateResourceServerCommand;
exports.UpdateTermsCommand = UpdateTermsCommand;
exports.UpdateTermsResponseFilterSensitiveLog = UpdateTermsResponseFilterSensitiveLog;
exports.UpdateUserAttributesCommand = UpdateUserAttributesCommand;
exports.UpdateUserAttributesRequestFilterSensitiveLog = UpdateUserAttributesRequestFilterSensitiveLog;
exports.UpdateUserPoolClientCommand = UpdateUserPoolClientCommand;
exports.UpdateUserPoolClientRequestFilterSensitiveLog = UpdateUserPoolClientRequestFilterSensitiveLog;
exports.UpdateUserPoolClientResponseFilterSensitiveLog = UpdateUserPoolClientResponseFilterSensitiveLog;
exports.UpdateUserPoolCommand = UpdateUserPoolCommand;
exports.UpdateUserPoolDomainCommand = UpdateUserPoolDomainCommand;
exports.UserContextDataTypeFilterSensitiveLog = UserContextDataTypeFilterSensitiveLog;
exports.UserImportInProgressException = UserImportInProgressException;
exports.UserImportJobStatusType = UserImportJobStatusType;
exports.UserLambdaValidationException = UserLambdaValidationException;
exports.UserNotConfirmedException = UserNotConfirmedException;
exports.UserNotFoundException = UserNotFoundException;
exports.UserPoolAddOnNotEnabledException = UserPoolAddOnNotEnabledException;
exports.UserPoolClientDescriptionFilterSensitiveLog = UserPoolClientDescriptionFilterSensitiveLog;
exports.UserPoolClientTypeFilterSensitiveLog = UserPoolClientTypeFilterSensitiveLog;
exports.UserPoolMfaType = UserPoolMfaType;
exports.UserPoolTaggingException = UserPoolTaggingException;
exports.UserPoolTierType = UserPoolTierType;
exports.UserStatusType = UserStatusType;
exports.UserTypeFilterSensitiveLog = UserTypeFilterSensitiveLog;
exports.UserVerificationType = UserVerificationType;
exports.UsernameAttributeType = UsernameAttributeType;
exports.UsernameExistsException = UsernameExistsException;
exports.VerifiedAttributeType = VerifiedAttributeType;
exports.VerifySoftwareTokenCommand = VerifySoftwareTokenCommand;
exports.VerifySoftwareTokenRequestFilterSensitiveLog = VerifySoftwareTokenRequestFilterSensitiveLog;
exports.VerifySoftwareTokenResponseFilterSensitiveLog = VerifySoftwareTokenResponseFilterSensitiveLog;
exports.VerifySoftwareTokenResponseType = VerifySoftwareTokenResponseType;
exports.VerifyUserAttributeCommand = VerifyUserAttributeCommand;
exports.VerifyUserAttributeRequestFilterSensitiveLog = VerifyUserAttributeRequestFilterSensitiveLog;
exports.WebAuthnChallengeNotFoundException = WebAuthnChallengeNotFoundException;
exports.WebAuthnClientMismatchException = WebAuthnClientMismatchException;
exports.WebAuthnConfigurationMissingException = WebAuthnConfigurationMissingException;
exports.WebAuthnCredentialNotSupportedException = WebAuthnCredentialNotSupportedException;
exports.WebAuthnNotEnabledException = WebAuthnNotEnabledException;
exports.WebAuthnOriginNotAllowedException = WebAuthnOriginNotAllowedException;
exports.WebAuthnRelyingPartyMismatchException = WebAuthnRelyingPartyMismatchException;
exports.paginateAdminListGroupsForUser = paginateAdminListGroupsForUser;
exports.paginateAdminListUserAuthEvents = paginateAdminListUserAuthEvents;
exports.paginateListGroups = paginateListGroups;
exports.paginateListIdentityProviders = paginateListIdentityProviders;
exports.paginateListResourceServers = paginateListResourceServers;
exports.paginateListUserPoolClients = paginateListUserPoolClients;
exports.paginateListUserPools = paginateListUserPools;
exports.paginateListUsers = paginateListUsers;
exports.paginateListUsersInGroup = paginateListUsersInGroup;
